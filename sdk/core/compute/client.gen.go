// Package compute provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package compute

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetComputeV2Thr1Images request
	GetComputeV2Thr1Images(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1InstanceTypes request
	GetComputeV2Thr1InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetComputeV2Thr1Images(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1ImagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1InstanceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetComputeV2Thr1ImagesRequest generates requests for GetComputeV2Thr1Images
func NewGetComputeV2Thr1ImagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1InstanceTypesRequest generates requests for GetComputeV2Thr1InstanceTypes
func NewGetComputeV2Thr1InstanceTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/instance-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetComputeV2Thr1ImagesWithResponse request
	GetComputeV2Thr1ImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1ImagesResponse, error)

	// GetComputeV2Thr1InstanceTypesWithResponse request
	GetComputeV2Thr1InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1InstanceTypesResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error)
}

type GetComputeV2Thr1ImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Empty
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1ImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1ImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1InstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineInstanceTypeList
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1InstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1InstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineExternalIPList
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EngineExternalIP
	JSON400      *EngineStatus
	JSON403      *EngineStatus
	JSON409      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineExternalIP
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineExternalIP
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineExternalIP
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Empty
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Empty
	JSON400      *EngineStatus
	JSON403      *EngineStatus
	JSON409      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Empty
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Empty
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineLinkList
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *EngineLink
	JSON400      *EngineStatus
	JSON403      *EngineStatus
	JSON409      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineLink
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineLink
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineSecretList
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EngineSecret
	JSON400      *EngineStatus
	JSON403      *EngineStatus
}

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetComputeV2Thr1ImagesWithResponse request returning *GetComputeV2Thr1ImagesResponse
func (c *ClientWithResponses) GetComputeV2Thr1ImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1ImagesResponse, error) {
	rsp, err := c.GetComputeV2Thr1Images(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1ImagesResponse(rsp)
}

// GetComputeV2Thr1InstanceTypesWithResponse request returning *GetComputeV2Thr1InstanceTypesResponse
func (c *ClientWithResponses) GetComputeV2Thr1InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1InstanceTypesResponse, error) {
	rsp, err := c.GetComputeV2Thr1InstanceTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1InstanceTypesResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse(rsp)
}

// ParseGetComputeV2Thr1ImagesResponse parses an HTTP response from a GetComputeV2Thr1ImagesWithResponse call
func ParseGetComputeV2Thr1ImagesResponse(rsp *http.Response) (*GetComputeV2Thr1ImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1ImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Empty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1InstanceTypesResponse parses an HTTP response from a GetComputeV2Thr1InstanceTypesWithResponse call
func ParseGetComputeV2Thr1InstanceTypesResponse(rsp *http.Response) (*GetComputeV2Thr1InstanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1InstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineInstanceTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineExternalIPList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EngineExternalIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineExternalIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineExternalIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineExternalIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Empty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Empty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Empty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Empty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineLinkList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EngineLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineSecretList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EngineSecret
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest EngineStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
