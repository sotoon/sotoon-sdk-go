// Package compute provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package compute

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetComputeV2Thr1Images request
	GetComputeV2Thr1Images(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1InstanceTypes request
	GetComputeV2Thr1InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetComputeV2Thr1Images(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1ImagesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1InstanceTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1InstanceTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetComputeV2Thr1ImagesRequest generates requests for GetComputeV2Thr1Images
func NewGetComputeV2Thr1ImagesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1InstanceTypesRequest generates requests for GetComputeV2Thr1InstanceTypes
func NewGetComputeV2Thr1InstanceTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/instance-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/external-ips/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest calls the generic PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks builder with application/json body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequest(server string, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody generates requests for PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks with any type of body
func NewPostComputeV2Thr1WorkspacesWorkspaceUUIDLinksRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest generates requests for DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId
func NewDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest calls the generic PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId builder with application/json body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody generates requests for PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId with any type of body
func NewPutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/links/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest generates requests for GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId
func NewGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/v2/thr1/workspaces/%s/secrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetComputeV2Thr1ImagesWithResponse request
	GetComputeV2Thr1ImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1ImagesResponse, error)

	// GetComputeV2Thr1InstanceTypesWithResponse request
	GetComputeV2Thr1InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1InstanceTypesResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse request with any body
	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error)

	// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request
	DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse request with any body
	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error)

	// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse request
	GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error)
}

type GetComputeV2Thr1ImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *string `json:"apiVersion,omitempty"`

		// Items Collection of Image resources
		Items *struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1Images200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'Image' that identifies the schema
			Kind GetComputeV2Thr1Images200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations are key-value pairs storing additional metadata about resources
				Annotations *map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp *string `json:"creationTimestamp,omitempty"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
				DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels *map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace and type
				Name string `json:"name"`

				// OwnerReferences References to other resources that own or manage the resource
				OwnerReferences *struct {
					ApiVersion         *string `json:"apiVersion,omitempty"`
					BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
					Controller         *bool   `json:"controller"`
					Kind               *string `json:"kind,omitempty"`
					Name               *string `json:"name,omitempty"`
					Uid                *string `json:"uid,omitempty"`
				} `json:"ownerReferences,omitempty"`

				// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid *string `json:"uid,omitempty"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace *string `json:"workspace,omitempty"`
			} `json:"metadata"`

			// Spec Desired configuration and characteristics for the image
			Spec struct {
				// Description A brief description of the image.
				Description *string `json:"description,omitempty"`

				// DistributionName The distribution name of the operating system.
				DistributionName *string `json:"distributionName,omitempty"`

				// OsType The operating system of the image.
				OsType *GetComputeV2Thr1Images200ItemsSpecOsType `json:"osType,omitempty"`

				// OsVersion The version of the operating system.
				OsVersion *string `json:"osVersion,omitempty"`

				// Public Indicates whether the image is public.
				Public *bool `json:"public,omitempty"`
			} `json:"spec"`

			// Status Current observed state and conditions of the image
			Status *struct {
				// CreationFailed Indicates if the image creation has failed.
				CreationFailed *bool `json:"creationFailed,omitempty"`

				// Size The size of the image in bytes.
				Size *int `json:"size,omitempty"`
			} `json:"status,omitempty"`
		} `json:"items,omitempty"`

		// Kind The string value 'ImageList' that identifies the schema
		Kind *GetComputeV2Thr1Images200Kind `json:"kind,omitempty"`

		// Metadata Standard metadata fields for the list
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int    `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1Images400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1Images400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1Images400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1Images403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1Images403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1Images403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1Images200ItemsApiVersion string
type GetComputeV2Thr1Images200ItemsKind string
type GetComputeV2Thr1Images200ItemsSpecOsType string
type GetComputeV2Thr1Images200Kind string
type GetComputeV2Thr1Images400ApiVersion string
type GetComputeV2Thr1Images400Kind string
type GetComputeV2Thr1Images400Status string
type GetComputeV2Thr1Images403ApiVersion string
type GetComputeV2Thr1Images403Kind string
type GetComputeV2Thr1Images403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1ImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1ImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1InstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *string `json:"apiVersion,omitempty"`

		// Items Collection of InstanceType resources
		Items *[]EngineInstanceType `json:"items"`

		// Kind The string value 'InstanceTypeList' that identifies the schema
		Kind     *GetComputeV2Thr1InstanceTypes200Kind `json:"kind,omitempty"`
		Metadata *V1ListMeta                           `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1InstanceTypes400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1InstanceTypes400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1InstanceTypes400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1InstanceTypes403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1InstanceTypes403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1InstanceTypes403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1InstanceTypes200Kind string
type GetComputeV2Thr1InstanceTypes400ApiVersion string
type GetComputeV2Thr1InstanceTypes400Kind string
type GetComputeV2Thr1InstanceTypes400Status string
type GetComputeV2Thr1InstanceTypes403ApiVersion string
type GetComputeV2Thr1InstanceTypes403Kind string
type GetComputeV2Thr1InstanceTypes403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1InstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1InstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200ApiVersion `json:"apiVersion,omitempty"`

		// Items Collection of ExternalIP resources
		Items *[]EngineExternalIP `json:"items"`

		// Kind The string value 'ExternalIPList' that identifies the schema
		Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200Kind `json:"kind,omitempty"`
		Metadata *V1ListMeta                                                `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201ApiVersion `json:"apiVersion"`

		// Kind The string value 'ExternalIP' that identifies the schema
		Kind     PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201Kind `json:"kind"`
		Metadata EngineObjectMeta                                           `json:"metadata"`
		Spec     V1Alpha2ExternalIPSpec                                     `json:"spec"`
		Status   *V1Alpha2ExternalIPStatus                                  `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status `json:"status,omitempty"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Status `json:"status,omitempty"`
	}
}
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Status string

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'ExternalIP' that identifies the schema
		Kind     DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                                       `json:"metadata"`
		Spec     V1Alpha2ExternalIPSpec                                                 `json:"spec"`
		Status   *V1Alpha2ExternalIPStatus                                              `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
	}
}
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status string

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'ExternalIP' that identifies the schema
		Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                                    `json:"metadata"`
		Spec     V1Alpha2ExternalIPSpec                                              `json:"spec"`
		Status   *V1Alpha2ExternalIPStatus                                           `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'ExternalIP' that identifies the schema
		Kind     PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                                    `json:"metadata"`
		Spec     V1Alpha2ExternalIPSpec                                              `json:"spec"`
		Status   *V1Alpha2ExternalIPStatus                                           `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
	}
}
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status string

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *string `json:"apiVersion,omitempty"`

		// Items Collection of Instance resources
		Items *struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'Instance' that identifies the schema
			Kind GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations are key-value pairs storing additional metadata about resources
				Annotations *map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp *string `json:"creationTimestamp,omitempty"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
				DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels *map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace and type
				Name string `json:"name"`

				// OwnerReferences References to other resources that own or manage the resource
				OwnerReferences *struct {
					ApiVersion         *string `json:"apiVersion,omitempty"`
					BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
					Controller         *bool   `json:"controller"`
					Kind               *string `json:"kind,omitempty"`
					Name               *string `json:"name,omitempty"`
					Uid                *string `json:"uid,omitempty"`
				} `json:"ownerReferences,omitempty"`

				// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid *string `json:"uid,omitempty"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace *string `json:"workspace,omitempty"`
			} `json:"metadata"`

			// Spec Desired configuration and characteristics for the instance
			Spec struct {
				// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
				IamEnabled *bool `json:"iamEnabled,omitempty"`

				// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
				ImageSource struct {
					// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
					CustomImage *string `json:"customImage,omitempty"`

					// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
					Image *string `json:"image,omitempty"`
				} `json:"imageSource"`

				// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
				InitialUser *struct {
					// Password Password configuration for the user account, specified either through a secret or file source
					Password *struct {
						// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
						FromSecret *struct {
							// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
							Key *string `json:"key,omitempty"`

							// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
							Name *string `json:"name,omitempty"`

							// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
							Optional *bool `json:"optional"`
						} `json:"fromSecret,omitempty"`
					} `json:"password,omitempty"`

					// SshAuthorizedKeys List of SSH public keys to authorize for this user account
					SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

					// Username Operating system username for the initial user account. Must follow Linux username requirements.
					Username *string `json:"username,omitempty"`
				} `json:"initialUser,omitempty"`

				// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
				Interfaces *struct {
					// Link Name of the Link resource that defines the network this interface connects to
					Link *string `json:"link,omitempty"`

					// Name Unique identifier for this network interface within the instance
					Name *string `json:"name,omitempty"`
				} `json:"interfaces,omitempty"`

				// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				OsVolume *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"osVolume,omitempty"`

				// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
				PlacementGroupRef *struct {
					Name *string `json:"name,omitempty"`
				} `json:"placementGroupRef,omitempty"`

				// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
				PoweredOn *bool `json:"poweredOn,omitempty"`

				// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
				RestartedAt *string `json:"restartedAt,omitempty"`

				// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
				Type string `json:"type"`

				// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
				UserData *string `json:"userData,omitempty"`

				// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				Volumes *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"volumes,omitempty"`
			} `json:"spec"`

			// Status Current observed state and conditions of the instance
			Status *struct {
				// AttachedVolumes Contains details about all storage volumes currently attached to this instance
				AttachedVolumes *struct {
					Size *ResourceQuantity `json:"Size,omitempty"`

					// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
					Name *string `json:"name,omitempty"`

					// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
					VolumeID *string `json:"volumeID,omitempty"`

					// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
					VolumeType *string `json:"volumeType,omitempty"`
				} `json:"attachedVolumes,omitempty"`

				// Conditions List of conditions representing the current state of various instance subsystems
				Conditions *struct {
					LastProbeTime      *string `json:"lastProbeTime,omitempty"`
					LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
					Message            *string `json:"message,omitempty"`
					Reason             *string `json:"reason,omitempty"`
					Status             *string `json:"status,omitempty"`
					Type               *string `json:"type,omitempty"`
				} `json:"conditions,omitempty"`

				// Ready Indicates whether the instance is fully configured and operational
				Ready *bool `json:"ready,omitempty"`

				// Resizing Indicates whether the instance is currently being resized to a different instance type
				Resizing *bool `json:"resizing,omitempty"`

				// RestartRequired Indicates whether the instance requires a restart to apply pending changes
				RestartRequired *bool `json:"restartRequired,omitempty"`

				// Restarting Indicates whether the instance is currently in the process of restarting
				Restarting *bool `json:"restarting,omitempty"`

				// Running Indicates whether the instance's operating system is currently running
				Running *bool `json:"running,omitempty"`

				// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
				RuntimeConfiguration *struct {
					Cpu    *ResourceQuantity `json:"cpu,omitempty"`
					Memory *ResourceQuantity `json:"memory,omitempty"`
				} `json:"runtimeConfiguration,omitempty"`

				// Type The current instance type that defines the cpu, memory and storage capacity
				Type *string `json:"type,omitempty"`
			} `json:"status,omitempty"`
		} `json:"items,omitempty"`

		// Kind The string value 'InstanceList' that identifies the schema
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200Kind `json:"kind,omitempty"`

		// Metadata Standard metadata fields for the list
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int    `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsKind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201ApiVersion `json:"apiVersion"`

		// Kind The string value 'Instance' that identifies the schema
		Kind PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations are key-value pairs storing additional metadata about resources
			Annotations *map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp *string `json:"creationTimestamp,omitempty"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
			DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels *map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace and type
			Name string `json:"name"`

			// OwnerReferences References to other resources that own or manage the resource
			OwnerReferences *struct {
				ApiVersion         *string `json:"apiVersion,omitempty"`
				BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
				Controller         *bool   `json:"controller"`
				Kind               *string `json:"kind,omitempty"`
				Name               *string `json:"name,omitempty"`
				Uid                *string `json:"uid,omitempty"`
			} `json:"ownerReferences,omitempty"`

			// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid *string `json:"uid,omitempty"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace *string `json:"workspace,omitempty"`
		} `json:"metadata"`

		// Spec Desired configuration and characteristics for the instance
		Spec struct {
			// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
			IamEnabled *bool `json:"iamEnabled,omitempty"`

			// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
			ImageSource struct {
				// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
				CustomImage *string `json:"customImage,omitempty"`

				// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
				Image *string `json:"image,omitempty"`
			} `json:"imageSource"`

			// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
			InitialUser *struct {
				// Password Password configuration for the user account, specified either through a secret or file source
				Password *struct {
					// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
					FromSecret *struct {
						// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
						Key *string `json:"key,omitempty"`

						// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
						Name *string `json:"name,omitempty"`

						// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
						Optional *bool `json:"optional"`
					} `json:"fromSecret,omitempty"`
				} `json:"password,omitempty"`

				// SshAuthorizedKeys List of SSH public keys to authorize for this user account
				SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

				// Username Operating system username for the initial user account. Must follow Linux username requirements.
				Username *string `json:"username,omitempty"`
			} `json:"initialUser,omitempty"`

			// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
			Interfaces *struct {
				// Link Name of the Link resource that defines the network this interface connects to
				Link *string `json:"link,omitempty"`

				// Name Unique identifier for this network interface within the instance
				Name *string `json:"name,omitempty"`
			} `json:"interfaces,omitempty"`

			// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			OsVolume *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"osVolume,omitempty"`

			// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
			PlacementGroupRef *struct {
				Name *string `json:"name,omitempty"`
			} `json:"placementGroupRef,omitempty"`

			// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
			PoweredOn *bool `json:"poweredOn,omitempty"`

			// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
			RestartedAt *string `json:"restartedAt,omitempty"`

			// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
			Type string `json:"type"`

			// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
			UserData *string `json:"userData,omitempty"`

			// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			Volumes *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"volumes,omitempty"`
		} `json:"spec"`

		// Status Current observed state and conditions of the instance
		Status *struct {
			// AttachedVolumes Contains details about all storage volumes currently attached to this instance
			AttachedVolumes *struct {
				Size *ResourceQuantity `json:"Size,omitempty"`

				// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
				Name *string `json:"name,omitempty"`

				// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
				VolumeID *string `json:"volumeID,omitempty"`

				// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
				VolumeType *string `json:"volumeType,omitempty"`
			} `json:"attachedVolumes,omitempty"`

			// Conditions List of conditions representing the current state of various instance subsystems
			Conditions *struct {
				LastProbeTime      *string `json:"lastProbeTime,omitempty"`
				LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
				Message            *string `json:"message,omitempty"`
				Reason             *string `json:"reason,omitempty"`
				Status             *string `json:"status,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"conditions,omitempty"`

			// Ready Indicates whether the instance is fully configured and operational
			Ready *bool `json:"ready,omitempty"`

			// Resizing Indicates whether the instance is currently being resized to a different instance type
			Resizing *bool `json:"resizing,omitempty"`

			// RestartRequired Indicates whether the instance requires a restart to apply pending changes
			RestartRequired *bool `json:"restartRequired,omitempty"`

			// Restarting Indicates whether the instance is currently in the process of restarting
			Restarting *bool `json:"restarting,omitempty"`

			// Running Indicates whether the instance's operating system is currently running
			Running *bool `json:"running,omitempty"`

			// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
			RuntimeConfiguration *struct {
				Cpu    *ResourceQuantity `json:"cpu,omitempty"`
				Memory *ResourceQuantity `json:"memory,omitempty"`
			} `json:"runtimeConfiguration,omitempty"`

			// Type The current instance type that defines the cpu, memory and storage capacity
			Type *string `json:"type,omitempty"`
		} `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status `json:"status,omitempty"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Status `json:"status,omitempty"`
	}
}
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Status string

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
	}
}
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status string

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'Instance' that identifies the schema
		Kind GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations are key-value pairs storing additional metadata about resources
			Annotations *map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp *string `json:"creationTimestamp,omitempty"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
			DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels *map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace and type
			Name string `json:"name"`

			// OwnerReferences References to other resources that own or manage the resource
			OwnerReferences *struct {
				ApiVersion         *string `json:"apiVersion,omitempty"`
				BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
				Controller         *bool   `json:"controller"`
				Kind               *string `json:"kind,omitempty"`
				Name               *string `json:"name,omitempty"`
				Uid                *string `json:"uid,omitempty"`
			} `json:"ownerReferences,omitempty"`

			// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid *string `json:"uid,omitempty"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace *string `json:"workspace,omitempty"`
		} `json:"metadata"`

		// Spec Desired configuration and characteristics for the instance
		Spec struct {
			// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
			IamEnabled *bool `json:"iamEnabled,omitempty"`

			// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
			ImageSource struct {
				// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
				CustomImage *string `json:"customImage,omitempty"`

				// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
				Image *string `json:"image,omitempty"`
			} `json:"imageSource"`

			// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
			InitialUser *struct {
				// Password Password configuration for the user account, specified either through a secret or file source
				Password *struct {
					// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
					FromSecret *struct {
						// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
						Key *string `json:"key,omitempty"`

						// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
						Name *string `json:"name,omitempty"`

						// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
						Optional *bool `json:"optional"`
					} `json:"fromSecret,omitempty"`
				} `json:"password,omitempty"`

				// SshAuthorizedKeys List of SSH public keys to authorize for this user account
				SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

				// Username Operating system username for the initial user account. Must follow Linux username requirements.
				Username *string `json:"username,omitempty"`
			} `json:"initialUser,omitempty"`

			// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
			Interfaces *struct {
				// Link Name of the Link resource that defines the network this interface connects to
				Link *string `json:"link,omitempty"`

				// Name Unique identifier for this network interface within the instance
				Name *string `json:"name,omitempty"`
			} `json:"interfaces,omitempty"`

			// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			OsVolume *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"osVolume,omitempty"`

			// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
			PlacementGroupRef *struct {
				Name *string `json:"name,omitempty"`
			} `json:"placementGroupRef,omitempty"`

			// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
			PoweredOn *bool `json:"poweredOn,omitempty"`

			// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
			RestartedAt *string `json:"restartedAt,omitempty"`

			// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
			Type string `json:"type"`

			// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
			UserData *string `json:"userData,omitempty"`

			// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			Volumes *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"volumes,omitempty"`
		} `json:"spec"`

		// Status Current observed state and conditions of the instance
		Status *struct {
			// AttachedVolumes Contains details about all storage volumes currently attached to this instance
			AttachedVolumes *struct {
				Size *ResourceQuantity `json:"Size,omitempty"`

				// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
				Name *string `json:"name,omitempty"`

				// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
				VolumeID *string `json:"volumeID,omitempty"`

				// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
				VolumeType *string `json:"volumeType,omitempty"`
			} `json:"attachedVolumes,omitempty"`

			// Conditions List of conditions representing the current state of various instance subsystems
			Conditions *struct {
				LastProbeTime      *string `json:"lastProbeTime,omitempty"`
				LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
				Message            *string `json:"message,omitempty"`
				Reason             *string `json:"reason,omitempty"`
				Status             *string `json:"status,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"conditions,omitempty"`

			// Ready Indicates whether the instance is fully configured and operational
			Ready *bool `json:"ready,omitempty"`

			// Resizing Indicates whether the instance is currently being resized to a different instance type
			Resizing *bool `json:"resizing,omitempty"`

			// RestartRequired Indicates whether the instance requires a restart to apply pending changes
			RestartRequired *bool `json:"restartRequired,omitempty"`

			// Restarting Indicates whether the instance is currently in the process of restarting
			Restarting *bool `json:"restarting,omitempty"`

			// Running Indicates whether the instance's operating system is currently running
			Running *bool `json:"running,omitempty"`

			// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
			RuntimeConfiguration *struct {
				Cpu    *ResourceQuantity `json:"cpu,omitempty"`
				Memory *ResourceQuantity `json:"memory,omitempty"`
			} `json:"runtimeConfiguration,omitempty"`

			// Type The current instance type that defines the cpu, memory and storage capacity
			Type *string `json:"type,omitempty"`
		} `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'Instance' that identifies the schema
		Kind PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations are key-value pairs storing additional metadata about resources
			Annotations *map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp *string `json:"creationTimestamp,omitempty"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
			DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels *map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace and type
			Name string `json:"name"`

			// OwnerReferences References to other resources that own or manage the resource
			OwnerReferences *struct {
				ApiVersion         *string `json:"apiVersion,omitempty"`
				BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
				Controller         *bool   `json:"controller"`
				Kind               *string `json:"kind,omitempty"`
				Name               *string `json:"name,omitempty"`
				Uid                *string `json:"uid,omitempty"`
			} `json:"ownerReferences,omitempty"`

			// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid *string `json:"uid,omitempty"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace *string `json:"workspace,omitempty"`
		} `json:"metadata"`

		// Spec Desired configuration and characteristics for the instance
		Spec struct {
			// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
			IamEnabled *bool `json:"iamEnabled,omitempty"`

			// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
			ImageSource struct {
				// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
				CustomImage *string `json:"customImage,omitempty"`

				// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
				Image *string `json:"image,omitempty"`
			} `json:"imageSource"`

			// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
			InitialUser *struct {
				// Password Password configuration for the user account, specified either through a secret or file source
				Password *struct {
					// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
					FromSecret *struct {
						// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
						Key *string `json:"key,omitempty"`

						// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
						Name *string `json:"name,omitempty"`

						// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
						Optional *bool `json:"optional"`
					} `json:"fromSecret,omitempty"`
				} `json:"password,omitempty"`

				// SshAuthorizedKeys List of SSH public keys to authorize for this user account
				SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

				// Username Operating system username for the initial user account. Must follow Linux username requirements.
				Username *string `json:"username,omitempty"`
			} `json:"initialUser,omitempty"`

			// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
			Interfaces *struct {
				// Link Name of the Link resource that defines the network this interface connects to
				Link *string `json:"link,omitempty"`

				// Name Unique identifier for this network interface within the instance
				Name *string `json:"name,omitempty"`
			} `json:"interfaces,omitempty"`

			// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			OsVolume *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"osVolume,omitempty"`

			// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
			PlacementGroupRef *struct {
				Name *string `json:"name,omitempty"`
			} `json:"placementGroupRef,omitempty"`

			// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
			PoweredOn *bool `json:"poweredOn,omitempty"`

			// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
			RestartedAt *string `json:"restartedAt,omitempty"`

			// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
			Type string `json:"type"`

			// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
			UserData *string `json:"userData,omitempty"`

			// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
			Volumes *struct {
				// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
				LocalDisk *struct {
					// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
					Name *string           `json:"name,omitempty"`
					Size *ResourceQuantity `json:"size,omitempty"`
				} `json:"localDisk,omitempty"`

				// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
				PersistentVolumeClaim *struct {
					ClaimName *string `json:"claimName,omitempty"`
					ReadOnly  *bool   `json:"readOnly,omitempty"`
				} `json:"persistentVolumeClaim,omitempty"`
			} `json:"volumes,omitempty"`
		} `json:"spec"`

		// Status Current observed state and conditions of the instance
		Status *struct {
			// AttachedVolumes Contains details about all storage volumes currently attached to this instance
			AttachedVolumes *struct {
				Size *ResourceQuantity `json:"Size,omitempty"`

				// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
				Name *string `json:"name,omitempty"`

				// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
				VolumeID *string `json:"volumeID,omitempty"`

				// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
				VolumeType *string `json:"volumeType,omitempty"`
			} `json:"attachedVolumes,omitempty"`

			// Conditions List of conditions representing the current state of various instance subsystems
			Conditions *struct {
				LastProbeTime      *string `json:"lastProbeTime,omitempty"`
				LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
				Message            *string `json:"message,omitempty"`
				Reason             *string `json:"reason,omitempty"`
				Status             *string `json:"status,omitempty"`
				Type               *string `json:"type,omitempty"`
			} `json:"conditions,omitempty"`

			// Ready Indicates whether the instance is fully configured and operational
			Ready *bool `json:"ready,omitempty"`

			// Resizing Indicates whether the instance is currently being resized to a different instance type
			Resizing *bool `json:"resizing,omitempty"`

			// RestartRequired Indicates whether the instance requires a restart to apply pending changes
			RestartRequired *bool `json:"restartRequired,omitempty"`

			// Restarting Indicates whether the instance is currently in the process of restarting
			Restarting *bool `json:"restarting,omitempty"`

			// Running Indicates whether the instance's operating system is currently running
			Running *bool `json:"running,omitempty"`

			// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
			RuntimeConfiguration *struct {
				Cpu    *ResourceQuantity `json:"cpu,omitempty"`
				Memory *ResourceQuantity `json:"memory,omitempty"`
			} `json:"runtimeConfiguration,omitempty"`

			// Type The current instance type that defines the cpu, memory and storage capacity
			Type *string `json:"type,omitempty"`
		} `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
	}
}
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status string

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *string `json:"apiVersion,omitempty"`

		// Items Collection of Link resources
		Items *[]EngineLink `json:"items"`

		// Kind The string value 'LinkList' that identifies the schema
		Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks200Kind `json:"kind,omitempty"`
		Metadata *V1ListMeta                                          `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201ApiVersion `json:"apiVersion"`

		// Kind The string value 'Link' that identifies the schema
		Kind     PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201Kind `json:"kind"`
		Metadata EngineObjectMeta                                     `json:"metadata"`
		Spec     V1Alpha2LinkSpec                                     `json:"spec"`
		Status   *V1Alpha2LinkStatus                                  `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status `json:"status,omitempty"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Status `json:"status,omitempty"`
	}
}
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409ApiVersion string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Kind string
type PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Status string

// Status returns HTTPResponse.Status
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
	}
}
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind string
type DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status string

// Status returns HTTPResponse.Status
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'Link' that identifies the schema
		Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                              `json:"metadata"`
		Spec     V1Alpha2LinkSpec                                              `json:"spec"`
		Status   *V1Alpha2LinkStatus                                           `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'Link' that identifies the schema
		Kind     PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                              `json:"metadata"`
		Spec     V1Alpha2LinkSpec                                              `json:"spec"`
		Status   *V1Alpha2LinkStatus                                           `json:"status,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
	}
}
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind string
type PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status string

// Status returns HTTPResponse.Status
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200ApiVersion `json:"apiVersion,omitempty"`

		// Items Collection of Secret resources
		Items *[]EngineSecret `json:"items"`

		// Kind The string value 'SecretList' that identifies the schema
		Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200Kind `json:"kind,omitempty"`
		Metadata *V1ListMeta                                            `json:"metadata,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200ApiVersion `json:"apiVersion"`

		// Data Contains the secret data as base64 encoded strings
		Data *map[string][]int `json:"data,omitempty"`

		// Immutable If set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified)
		Immutable *bool `json:"immutable"`

		// Kind The string value 'Secret' that identifies the schema
		Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200Kind `json:"kind"`
		Metadata EngineObjectMeta                                                `json:"metadata"`

		// StringData Allows specifying non-binary secret data in string form, merged into the data field on write
		StringData *map[string]string `json:"stringData,omitempty"`

		// Type Used to facilitate programmatic handling of secret data
		Type *string `json:"type,omitempty"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Status `json:"status,omitempty"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403ApiVersion `json:"apiVersion,omitempty"`

		// Code HTTP status code corresponding to this status
		Code    *int                 `json:"code,omitempty"`
		Details *EngineStatusDetails `json:"details,omitempty"`

		// Kind Value is always 'Status'
		Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Kind `json:"kind,omitempty"`

		// Message Human-readable description of the status
		Message  *string     `json:"message,omitempty"`
		Metadata *V1ListMeta `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause of the error
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Status `json:"status,omitempty"`
	}
}
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Status string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403ApiVersion string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Kind string
type GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Status string

// Status returns HTTPResponse.Status
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetComputeV2Thr1ImagesWithResponse request returning *GetComputeV2Thr1ImagesResponse
func (c *ClientWithResponses) GetComputeV2Thr1ImagesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1ImagesResponse, error) {
	rsp, err := c.GetComputeV2Thr1Images(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1ImagesResponse(rsp)
}

// GetComputeV2Thr1InstanceTypesWithResponse request returning *GetComputeV2Thr1InstanceTypesResponse
func (c *ClientWithResponses) GetComputeV2Thr1InstanceTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1InstanceTypesResponse, error) {
	rsp, err := c.GetComputeV2Thr1InstanceTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1InstanceTypesResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

// PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse request with arbitrary body returning *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse
func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

func (c *ClientWithResponses) PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse(ctx context.Context, workspaceUUID string, body PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	rsp, err := c.PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp)
}

// DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request returning *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse request with arbitrary body returning *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse
func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	rsp, err := c.PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse(rsp)
}

// GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse request returning *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse
func (c *ClientWithResponses) GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error) {
	rsp, err := c.GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse(rsp)
}

// ParseGetComputeV2Thr1ImagesResponse parses an HTTP response from a GetComputeV2Thr1ImagesWithResponse call
func ParseGetComputeV2Thr1ImagesResponse(rsp *http.Response) (*GetComputeV2Thr1ImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1ImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *string `json:"apiVersion,omitempty"`

			// Items Collection of Image resources
			Items *struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetComputeV2Thr1Images200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'Image' that identifies the schema
				Kind GetComputeV2Thr1Images200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations are key-value pairs storing additional metadata about resources
					Annotations *map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp *string `json:"creationTimestamp,omitempty"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
					DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels *map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace and type
					Name string `json:"name"`

					// OwnerReferences References to other resources that own or manage the resource
					OwnerReferences *struct {
						ApiVersion         *string `json:"apiVersion,omitempty"`
						BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
						Controller         *bool   `json:"controller"`
						Kind               *string `json:"kind,omitempty"`
						Name               *string `json:"name,omitempty"`
						Uid                *string `json:"uid,omitempty"`
					} `json:"ownerReferences,omitempty"`

					// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid *string `json:"uid,omitempty"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace *string `json:"workspace,omitempty"`
				} `json:"metadata"`

				// Spec Desired configuration and characteristics for the image
				Spec struct {
					// Description A brief description of the image.
					Description *string `json:"description,omitempty"`

					// DistributionName The distribution name of the operating system.
					DistributionName *string `json:"distributionName,omitempty"`

					// OsType The operating system of the image.
					OsType *GetComputeV2Thr1Images200ItemsSpecOsType `json:"osType,omitempty"`

					// OsVersion The version of the operating system.
					OsVersion *string `json:"osVersion,omitempty"`

					// Public Indicates whether the image is public.
					Public *bool `json:"public,omitempty"`
				} `json:"spec"`

				// Status Current observed state and conditions of the image
				Status *struct {
					// CreationFailed Indicates if the image creation has failed.
					CreationFailed *bool `json:"creationFailed,omitempty"`

					// Size The size of the image in bytes.
					Size *int `json:"size,omitempty"`
				} `json:"status,omitempty"`
			} `json:"items,omitempty"`

			// Kind The string value 'ImageList' that identifies the schema
			Kind *GetComputeV2Thr1Images200Kind `json:"kind,omitempty"`

			// Metadata Standard metadata fields for the list
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int    `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1Images400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1Images400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1Images400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1Images403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1Images403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1Images403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1InstanceTypesResponse parses an HTTP response from a GetComputeV2Thr1InstanceTypesWithResponse call
func ParseGetComputeV2Thr1InstanceTypesResponse(rsp *http.Response) (*GetComputeV2Thr1InstanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1InstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *string `json:"apiVersion,omitempty"`

			// Items Collection of InstanceType resources
			Items *[]EngineInstanceType `json:"items"`

			// Kind The string value 'InstanceTypeList' that identifies the schema
			Kind     *GetComputeV2Thr1InstanceTypes200Kind `json:"kind,omitempty"`
			Metadata *V1ListMeta                           `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1InstanceTypes400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1InstanceTypes400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1InstanceTypes400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1InstanceTypes403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1InstanceTypes403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1InstanceTypes403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200ApiVersion `json:"apiVersion,omitempty"`

			// Items Collection of ExternalIP resources
			Items *[]EngineExternalIP `json:"items"`

			// Kind The string value 'ExternalIPList' that identifies the schema
			Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps200Kind `json:"kind,omitempty"`
			Metadata *V1ListMeta                                                `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201ApiVersion `json:"apiVersion"`

			// Kind The string value 'ExternalIP' that identifies the schema
			Kind     PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps201Kind `json:"kind"`
			Metadata EngineObjectMeta                                           `json:"metadata"`
			Spec     V1Alpha2ExternalIPSpec                                     `json:"spec"`
			Status   *V1Alpha2ExternalIPStatus                                  `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDExternalIps409Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'ExternalIP' that identifies the schema
			Kind     DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                                       `json:"metadata"`
			Spec     V1Alpha2ExternalIPSpec                                                 `json:"spec"`
			Status   *V1Alpha2ExternalIPStatus                                              `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'ExternalIP' that identifies the schema
			Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                                    `json:"metadata"`
			Spec     V1Alpha2ExternalIPSpec                                              `json:"spec"`
			Status   *V1Alpha2ExternalIPStatus                                           `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'ExternalIP' that identifies the schema
			Kind     PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                                    `json:"metadata"`
			Spec     V1Alpha2ExternalIPSpec                                              `json:"spec"`
			Status   *V1Alpha2ExternalIPStatus                                           `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDExternalIpsResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *string `json:"apiVersion,omitempty"`

			// Items Collection of Instance resources
			Items *struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'Instance' that identifies the schema
				Kind GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations are key-value pairs storing additional metadata about resources
					Annotations *map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp *string `json:"creationTimestamp,omitempty"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
					DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels *map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace and type
					Name string `json:"name"`

					// OwnerReferences References to other resources that own or manage the resource
					OwnerReferences *struct {
						ApiVersion         *string `json:"apiVersion,omitempty"`
						BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
						Controller         *bool   `json:"controller"`
						Kind               *string `json:"kind,omitempty"`
						Name               *string `json:"name,omitempty"`
						Uid                *string `json:"uid,omitempty"`
					} `json:"ownerReferences,omitempty"`

					// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid *string `json:"uid,omitempty"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace *string `json:"workspace,omitempty"`
				} `json:"metadata"`

				// Spec Desired configuration and characteristics for the instance
				Spec struct {
					// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
					IamEnabled *bool `json:"iamEnabled,omitempty"`

					// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
					ImageSource struct {
						// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
						CustomImage *string `json:"customImage,omitempty"`

						// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
						Image *string `json:"image,omitempty"`
					} `json:"imageSource"`

					// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
					InitialUser *struct {
						// Password Password configuration for the user account, specified either through a secret or file source
						Password *struct {
							// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
							FromSecret *struct {
								// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
								Key *string `json:"key,omitempty"`

								// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
								Name *string `json:"name,omitempty"`

								// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
								Optional *bool `json:"optional"`
							} `json:"fromSecret,omitempty"`
						} `json:"password,omitempty"`

						// SshAuthorizedKeys List of SSH public keys to authorize for this user account
						SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

						// Username Operating system username for the initial user account. Must follow Linux username requirements.
						Username *string `json:"username,omitempty"`
					} `json:"initialUser,omitempty"`

					// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
					Interfaces *struct {
						// Link Name of the Link resource that defines the network this interface connects to
						Link *string `json:"link,omitempty"`

						// Name Unique identifier for this network interface within the instance
						Name *string `json:"name,omitempty"`
					} `json:"interfaces,omitempty"`

					// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
					OsVolume *struct {
						// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
						LocalDisk *struct {
							// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
							Name *string           `json:"name,omitempty"`
							Size *ResourceQuantity `json:"size,omitempty"`
						} `json:"localDisk,omitempty"`

						// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
						PersistentVolumeClaim *struct {
							ClaimName *string `json:"claimName,omitempty"`
							ReadOnly  *bool   `json:"readOnly,omitempty"`
						} `json:"persistentVolumeClaim,omitempty"`
					} `json:"osVolume,omitempty"`

					// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
					PlacementGroupRef *struct {
						Name *string `json:"name,omitempty"`
					} `json:"placementGroupRef,omitempty"`

					// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
					PoweredOn *bool `json:"poweredOn,omitempty"`

					// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
					RestartedAt *string `json:"restartedAt,omitempty"`

					// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
					Type string `json:"type"`

					// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
					UserData *string `json:"userData,omitempty"`

					// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
					Volumes *struct {
						// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
						LocalDisk *struct {
							// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
							Name *string           `json:"name,omitempty"`
							Size *ResourceQuantity `json:"size,omitempty"`
						} `json:"localDisk,omitempty"`

						// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
						PersistentVolumeClaim *struct {
							ClaimName *string `json:"claimName,omitempty"`
							ReadOnly  *bool   `json:"readOnly,omitempty"`
						} `json:"persistentVolumeClaim,omitempty"`
					} `json:"volumes,omitempty"`
				} `json:"spec"`

				// Status Current observed state and conditions of the instance
				Status *struct {
					// AttachedVolumes Contains details about all storage volumes currently attached to this instance
					AttachedVolumes *struct {
						Size *ResourceQuantity `json:"Size,omitempty"`

						// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
						Name *string `json:"name,omitempty"`

						// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
						VolumeID *string `json:"volumeID,omitempty"`

						// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
						VolumeType *string `json:"volumeType,omitempty"`
					} `json:"attachedVolumes,omitempty"`

					// Conditions List of conditions representing the current state of various instance subsystems
					Conditions *struct {
						LastProbeTime      *string `json:"lastProbeTime,omitempty"`
						LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
						Message            *string `json:"message,omitempty"`
						Reason             *string `json:"reason,omitempty"`
						Status             *string `json:"status,omitempty"`
						Type               *string `json:"type,omitempty"`
					} `json:"conditions,omitempty"`

					// Ready Indicates whether the instance is fully configured and operational
					Ready *bool `json:"ready,omitempty"`

					// Resizing Indicates whether the instance is currently being resized to a different instance type
					Resizing *bool `json:"resizing,omitempty"`

					// RestartRequired Indicates whether the instance requires a restart to apply pending changes
					RestartRequired *bool `json:"restartRequired,omitempty"`

					// Restarting Indicates whether the instance is currently in the process of restarting
					Restarting *bool `json:"restarting,omitempty"`

					// Running Indicates whether the instance's operating system is currently running
					Running *bool `json:"running,omitempty"`

					// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
					RuntimeConfiguration *struct {
						Cpu    *ResourceQuantity `json:"cpu,omitempty"`
						Memory *ResourceQuantity `json:"memory,omitempty"`
					} `json:"runtimeConfiguration,omitempty"`

					// Type The current instance type that defines the cpu, memory and storage capacity
					Type *string `json:"type,omitempty"`
				} `json:"status,omitempty"`
			} `json:"items,omitempty"`

			// Kind The string value 'InstanceList' that identifies the schema
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances200Kind `json:"kind,omitempty"`

			// Metadata Standard metadata fields for the list
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int    `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201ApiVersion `json:"apiVersion"`

			// Kind The string value 'Instance' that identifies the schema
			Kind PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations are key-value pairs storing additional metadata about resources
				Annotations *map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp *string `json:"creationTimestamp,omitempty"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
				DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels *map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace and type
				Name string `json:"name"`

				// OwnerReferences References to other resources that own or manage the resource
				OwnerReferences *struct {
					ApiVersion         *string `json:"apiVersion,omitempty"`
					BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
					Controller         *bool   `json:"controller"`
					Kind               *string `json:"kind,omitempty"`
					Name               *string `json:"name,omitempty"`
					Uid                *string `json:"uid,omitempty"`
				} `json:"ownerReferences,omitempty"`

				// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid *string `json:"uid,omitempty"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace *string `json:"workspace,omitempty"`
			} `json:"metadata"`

			// Spec Desired configuration and characteristics for the instance
			Spec struct {
				// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
				IamEnabled *bool `json:"iamEnabled,omitempty"`

				// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
				ImageSource struct {
					// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
					CustomImage *string `json:"customImage,omitempty"`

					// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
					Image *string `json:"image,omitempty"`
				} `json:"imageSource"`

				// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
				InitialUser *struct {
					// Password Password configuration for the user account, specified either through a secret or file source
					Password *struct {
						// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
						FromSecret *struct {
							// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
							Key *string `json:"key,omitempty"`

							// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
							Name *string `json:"name,omitempty"`

							// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
							Optional *bool `json:"optional"`
						} `json:"fromSecret,omitempty"`
					} `json:"password,omitempty"`

					// SshAuthorizedKeys List of SSH public keys to authorize for this user account
					SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

					// Username Operating system username for the initial user account. Must follow Linux username requirements.
					Username *string `json:"username,omitempty"`
				} `json:"initialUser,omitempty"`

				// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
				Interfaces *struct {
					// Link Name of the Link resource that defines the network this interface connects to
					Link *string `json:"link,omitempty"`

					// Name Unique identifier for this network interface within the instance
					Name *string `json:"name,omitempty"`
				} `json:"interfaces,omitempty"`

				// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				OsVolume *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"osVolume,omitempty"`

				// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
				PlacementGroupRef *struct {
					Name *string `json:"name,omitempty"`
				} `json:"placementGroupRef,omitempty"`

				// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
				PoweredOn *bool `json:"poweredOn,omitempty"`

				// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
				RestartedAt *string `json:"restartedAt,omitempty"`

				// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
				Type string `json:"type"`

				// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
				UserData *string `json:"userData,omitempty"`

				// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				Volumes *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"volumes,omitempty"`
			} `json:"spec"`

			// Status Current observed state and conditions of the instance
			Status *struct {
				// AttachedVolumes Contains details about all storage volumes currently attached to this instance
				AttachedVolumes *struct {
					Size *ResourceQuantity `json:"Size,omitempty"`

					// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
					Name *string `json:"name,omitempty"`

					// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
					VolumeID *string `json:"volumeID,omitempty"`

					// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
					VolumeType *string `json:"volumeType,omitempty"`
				} `json:"attachedVolumes,omitempty"`

				// Conditions List of conditions representing the current state of various instance subsystems
				Conditions *struct {
					LastProbeTime      *string `json:"lastProbeTime,omitempty"`
					LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
					Message            *string `json:"message,omitempty"`
					Reason             *string `json:"reason,omitempty"`
					Status             *string `json:"status,omitempty"`
					Type               *string `json:"type,omitempty"`
				} `json:"conditions,omitempty"`

				// Ready Indicates whether the instance is fully configured and operational
				Ready *bool `json:"ready,omitempty"`

				// Resizing Indicates whether the instance is currently being resized to a different instance type
				Resizing *bool `json:"resizing,omitempty"`

				// RestartRequired Indicates whether the instance requires a restart to apply pending changes
				RestartRequired *bool `json:"restartRequired,omitempty"`

				// Restarting Indicates whether the instance is currently in the process of restarting
				Restarting *bool `json:"restarting,omitempty"`

				// Running Indicates whether the instance's operating system is currently running
				Running *bool `json:"running,omitempty"`

				// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
				RuntimeConfiguration *struct {
					Cpu    *ResourceQuantity `json:"cpu,omitempty"`
					Memory *ResourceQuantity `json:"memory,omitempty"`
				} `json:"runtimeConfiguration,omitempty"`

				// Type The current instance type that defines the cpu, memory and storage capacity
				Type *string `json:"type,omitempty"`
			} `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDInstances409Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'Instance' that identifies the schema
			Kind GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations are key-value pairs storing additional metadata about resources
				Annotations *map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp *string `json:"creationTimestamp,omitempty"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
				DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels *map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace and type
				Name string `json:"name"`

				// OwnerReferences References to other resources that own or manage the resource
				OwnerReferences *struct {
					ApiVersion         *string `json:"apiVersion,omitempty"`
					BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
					Controller         *bool   `json:"controller"`
					Kind               *string `json:"kind,omitempty"`
					Name               *string `json:"name,omitempty"`
					Uid                *string `json:"uid,omitempty"`
				} `json:"ownerReferences,omitempty"`

				// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid *string `json:"uid,omitempty"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace *string `json:"workspace,omitempty"`
			} `json:"metadata"`

			// Spec Desired configuration and characteristics for the instance
			Spec struct {
				// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
				IamEnabled *bool `json:"iamEnabled,omitempty"`

				// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
				ImageSource struct {
					// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
					CustomImage *string `json:"customImage,omitempty"`

					// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
					Image *string `json:"image,omitempty"`
				} `json:"imageSource"`

				// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
				InitialUser *struct {
					// Password Password configuration for the user account, specified either through a secret or file source
					Password *struct {
						// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
						FromSecret *struct {
							// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
							Key *string `json:"key,omitempty"`

							// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
							Name *string `json:"name,omitempty"`

							// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
							Optional *bool `json:"optional"`
						} `json:"fromSecret,omitempty"`
					} `json:"password,omitempty"`

					// SshAuthorizedKeys List of SSH public keys to authorize for this user account
					SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

					// Username Operating system username for the initial user account. Must follow Linux username requirements.
					Username *string `json:"username,omitempty"`
				} `json:"initialUser,omitempty"`

				// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
				Interfaces *struct {
					// Link Name of the Link resource that defines the network this interface connects to
					Link *string `json:"link,omitempty"`

					// Name Unique identifier for this network interface within the instance
					Name *string `json:"name,omitempty"`
				} `json:"interfaces,omitempty"`

				// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				OsVolume *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"osVolume,omitempty"`

				// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
				PlacementGroupRef *struct {
					Name *string `json:"name,omitempty"`
				} `json:"placementGroupRef,omitempty"`

				// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
				PoweredOn *bool `json:"poweredOn,omitempty"`

				// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
				RestartedAt *string `json:"restartedAt,omitempty"`

				// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
				Type string `json:"type"`

				// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
				UserData *string `json:"userData,omitempty"`

				// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				Volumes *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"volumes,omitempty"`
			} `json:"spec"`

			// Status Current observed state and conditions of the instance
			Status *struct {
				// AttachedVolumes Contains details about all storage volumes currently attached to this instance
				AttachedVolumes *struct {
					Size *ResourceQuantity `json:"Size,omitempty"`

					// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
					Name *string `json:"name,omitempty"`

					// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
					VolumeID *string `json:"volumeID,omitempty"`

					// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
					VolumeType *string `json:"volumeType,omitempty"`
				} `json:"attachedVolumes,omitempty"`

				// Conditions List of conditions representing the current state of various instance subsystems
				Conditions *struct {
					LastProbeTime      *string `json:"lastProbeTime,omitempty"`
					LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
					Message            *string `json:"message,omitempty"`
					Reason             *string `json:"reason,omitempty"`
					Status             *string `json:"status,omitempty"`
					Type               *string `json:"type,omitempty"`
				} `json:"conditions,omitempty"`

				// Ready Indicates whether the instance is fully configured and operational
				Ready *bool `json:"ready,omitempty"`

				// Resizing Indicates whether the instance is currently being resized to a different instance type
				Resizing *bool `json:"resizing,omitempty"`

				// RestartRequired Indicates whether the instance requires a restart to apply pending changes
				RestartRequired *bool `json:"restartRequired,omitempty"`

				// Restarting Indicates whether the instance is currently in the process of restarting
				Restarting *bool `json:"restarting,omitempty"`

				// Running Indicates whether the instance's operating system is currently running
				Running *bool `json:"running,omitempty"`

				// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
				RuntimeConfiguration *struct {
					Cpu    *ResourceQuantity `json:"cpu,omitempty"`
					Memory *ResourceQuantity `json:"memory,omitempty"`
				} `json:"runtimeConfiguration,omitempty"`

				// Type The current instance type that defines the cpu, memory and storage capacity
				Type *string `json:"type,omitempty"`
			} `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'Instance' that identifies the schema
			Kind PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations are key-value pairs storing additional metadata about resources
				Annotations *map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp *string `json:"creationTimestamp,omitempty"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion - resource will be removed after this time
				DeletionTimestamp *string `json:"deletionTimestamp,omitempty"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels *map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace and type
				Name string `json:"name"`

				// OwnerReferences References to other resources that own or manage the resource
				OwnerReferences *struct {
					ApiVersion         *string `json:"apiVersion,omitempty"`
					BlockOwnerDeletion *bool   `json:"blockOwnerDeletion"`
					Controller         *bool   `json:"controller"`
					Kind               *string `json:"kind,omitempty"`
					Name               *string `json:"name,omitempty"`
					Uid                *string `json:"uid,omitempty"`
				} `json:"ownerReferences,omitempty"`

				// ResourceVersion An opaque value representing the internal version of this object that can be used for optimistic concurrency and change detection
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid *string `json:"uid,omitempty"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace *string `json:"workspace,omitempty"`
			} `json:"metadata"`

			// Spec Desired configuration and characteristics for the instance
			Spec struct {
				// IamEnabled When enabled, SSH access to this instance will be authenticated through Sotoon IAM.
				IamEnabled *bool `json:"iamEnabled,omitempty"`

				// ImageSource Specifies the base operating system image used to boot the instance. Must specify either an image or customImage, but not both.
				ImageSource struct {
					// CustomImage Name of the custom image to boot the instance from. Must be a valid custom image name. Cannot be modified after instance creation. Cannot be used together with image.
					CustomImage *string `json:"customImage,omitempty"`

					// Image Name of the base operating system image to boot the instance from. Must be a valid image name. Cannot be modified after instance creation. Cannot be used together with customImage.
					Image *string `json:"image,omitempty"`
				} `json:"imageSource"`

				// InitialUser Defines the initial OS login credentials. If specified, both username and password must be provided.
				InitialUser *struct {
					// Password Password configuration for the user account, specified either through a secret or file source
					Password *struct {
						// FromSecret Reference to a secret containing the password value. The secret must exist in the same namespace as the instance.
						FromSecret *struct {
							// Key Key within the secret containing the desired value. If not specified, defaults to the instance name
							Key *string `json:"key,omitempty"`

							// Name Name of the secret in the instance's namespace. If not specified, defaults to <Instance.Name>-login. Must be 1-220 characters long and contain only lowercase alphanumeric characters, - and .
							Name *string `json:"name,omitempty"`

							// Optional When true, the referenced secret and key are optional and will be filled automatically. When false or unset, they must exist
							Optional *bool `json:"optional"`
						} `json:"fromSecret,omitempty"`
					} `json:"password,omitempty"`

					// SshAuthorizedKeys List of SSH public keys to authorize for this user account
					SshAuthorizedKeys *[]string `json:"sshAuthorizedKeys,omitempty"`

					// Username Operating system username for the initial user account. Must follow Linux username requirements.
					Username *string `json:"username,omitempty"`
				} `json:"initialUser,omitempty"`

				// Interfaces List of network interfaces to attach to the instance. Each interface defines network connectivity.
				Interfaces *struct {
					// Link Name of the Link resource that defines the network this interface connects to
					Link *string `json:"link,omitempty"`

					// Name Unique identifier for this network interface within the instance
					Name *string `json:"name,omitempty"`
				} `json:"interfaces,omitempty"`

				// OsVolume Defines the storage volume containing the operating system. Must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				OsVolume *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"osVolume,omitempty"`

				// PlacementGroupRef Reference to a placement group that influences instance scheduling for anti-affinity.
				PlacementGroupRef *struct {
					Name *string `json:"name,omitempty"`
				} `json:"placementGroupRef,omitempty"`

				// PoweredOn Controls the power state of the instance. True means the instance is powered on, false means powered off.
				PoweredOn *bool `json:"poweredOn,omitempty"`

				// RestartedAt Timestamp indicating when the instance is scheduled to restart. Empty indicates no scheduled restart.
				RestartedAt *string `json:"restartedAt,omitempty"`

				// Type Specifies the instance type that determines CPU, memory and other resource allocations. Must match an existing Instance Type name. Can be modified to resize the instance.
				Type string `json:"type"`

				// UserData Cloud-init configuration data provided in base64 encoded format. Used to customize instance on first boot.
				UserData *string `json:"userData,omitempty"`

				// Volumes List of additional storage volumes to attach to the instance. Each volume must specify either persistentVolumeClaim or localDisk (localDisk settings are ignored).
				Volumes *struct {
					// LocalDisk Specification for a local disk volume to create and attach to the instance. Cannot be used together with persistentVolumeClaim.
					LocalDisk *struct {
						// Name Name of the local disk. This field is automatically populated based on the instance type configuration and should not be set by users.
						Name *string           `json:"name,omitempty"`
						Size *ResourceQuantity `json:"size,omitempty"`
					} `json:"localDisk,omitempty"`

					// PersistentVolumeClaim Reference to a PersistentVolumeClaim to use as a volume source. Cannot be used together with localDisk.
					PersistentVolumeClaim *struct {
						ClaimName *string `json:"claimName,omitempty"`
						ReadOnly  *bool   `json:"readOnly,omitempty"`
					} `json:"persistentVolumeClaim,omitempty"`
				} `json:"volumes,omitempty"`
			} `json:"spec"`

			// Status Current observed state and conditions of the instance
			Status *struct {
				// AttachedVolumes Contains details about all storage volumes currently attached to this instance
				AttachedVolumes *struct {
					Size *ResourceQuantity `json:"Size,omitempty"`

					// Name Name of the attached volume, corresponding to the PersistentVolume name for persistent volumes or the local disk name for local disks
					Name *string `json:"name,omitempty"`

					// VolumeID Unique identifier of the volume resource, used for mapping volumes to block devices
					VolumeID *string `json:"volumeID,omitempty"`

					// VolumeType Type of the attached volume - either 'persistentvolume' or 'localdisk'
					VolumeType *string `json:"volumeType,omitempty"`
				} `json:"attachedVolumes,omitempty"`

				// Conditions List of conditions representing the current state of various instance subsystems
				Conditions *struct {
					LastProbeTime      *string `json:"lastProbeTime,omitempty"`
					LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
					Message            *string `json:"message,omitempty"`
					Reason             *string `json:"reason,omitempty"`
					Status             *string `json:"status,omitempty"`
					Type               *string `json:"type,omitempty"`
				} `json:"conditions,omitempty"`

				// Ready Indicates whether the instance is fully configured and operational
				Ready *bool `json:"ready,omitempty"`

				// Resizing Indicates whether the instance is currently being resized to a different instance type
				Resizing *bool `json:"resizing,omitempty"`

				// RestartRequired Indicates whether the instance requires a restart to apply pending changes
				RestartRequired *bool `json:"restartRequired,omitempty"`

				// Restarting Indicates whether the instance is currently in the process of restarting
				Restarting *bool `json:"restarting,omitempty"`

				// Running Indicates whether the instance's operating system is currently running
				Running *bool `json:"running,omitempty"`

				// RuntimeConfiguration Contains the current runtime configuration settings for the instance, including CPU, memory and other resources
				RuntimeConfiguration *struct {
					Cpu    *ResourceQuantity `json:"cpu,omitempty"`
					Memory *ResourceQuantity `json:"memory,omitempty"`
				} `json:"runtimeConfiguration,omitempty"`

				// Type The current instance type that defines the cpu, memory and storage capacity
				Type *string `json:"type,omitempty"`
			} `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDInstancesResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *string `json:"apiVersion,omitempty"`

			// Items Collection of Link resources
			Items *[]EngineLink `json:"items"`

			// Kind The string value 'LinkList' that identifies the schema
			Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks200Kind `json:"kind,omitempty"`
			Metadata *V1ListMeta                                          `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse parses an HTTP response from a PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksWithResponse call
func ParsePostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse(rsp *http.Response) (*PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeV2Thr1WorkspacesWorkspaceUUIDLinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201ApiVersion `json:"apiVersion"`

			// Kind The string value 'Link' that identifies the schema
			Kind     PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks201Kind `json:"kind"`
			Metadata EngineObjectMeta                                     `json:"metadata"`
			Spec     V1Alpha2LinkSpec                                     `json:"spec"`
			Status   *V1Alpha2LinkStatus                                  `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PostComputeV2Thr1WorkspacesWorkspaceUUIDLinks409Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParseDeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *DeleteComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'Link' that identifies the schema
			Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                              `json:"metadata"`
			Spec     V1Alpha2LinkSpec                                              `json:"spec"`
			Status   *V1Alpha2LinkStatus                                           `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse parses an HTTP response from a PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdWithResponse call
func ParsePutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse(rsp *http.Response) (*PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'Link' that identifies the schema
			Kind     PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                              `json:"metadata"`
			Spec     V1Alpha2LinkSpec                                              `json:"spec"`
			Status   *V1Alpha2LinkStatus                                           `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *PutComputeV2Thr1WorkspacesWorkspaceUUIDLinksResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200ApiVersion `json:"apiVersion,omitempty"`

			// Items Collection of Secret resources
			Items *[]EngineSecret `json:"items"`

			// Kind The string value 'SecretList' that identifies the schema
			Kind     *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets200Kind `json:"kind,omitempty"`
			Metadata *V1ListMeta                                            `json:"metadata,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecrets403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse parses an HTTP response from a GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdWithResponse call
func ParseGetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse(rsp *http.Response) (*GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200ApiVersion `json:"apiVersion"`

			// Data Contains the secret data as base64 encoded strings
			Data *map[string][]int `json:"data,omitempty"`

			// Immutable If set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified)
			Immutable *bool `json:"immutable"`

			// Kind The string value 'Secret' that identifies the schema
			Kind     GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId200Kind `json:"kind"`
			Metadata EngineObjectMeta                                                `json:"metadata"`

			// StringData Allows specifying non-binary secret data in string form, merged into the data field on write
			StringData *map[string]string `json:"stringData,omitempty"`

			// Type Used to facilitate programmatic handling of secret data
			Type *string `json:"type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId400Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403ApiVersion `json:"apiVersion,omitempty"`

			// Code HTTP status code corresponding to this status
			Code    *int                 `json:"code,omitempty"`
			Details *EngineStatusDetails `json:"details,omitempty"`

			// Kind Value is always 'Status'
			Kind *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Kind `json:"kind,omitempty"`

			// Message Human-readable description of the status
			Message  *string     `json:"message,omitempty"`
			Metadata *V1ListMeta `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause of the error
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status *GetComputeV2Thr1WorkspacesWorkspaceUUIDSecretsResourceId403Status `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
