// Package sotoon_kubernetes_engine provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sotoon_kubernetes_engine

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonCluster resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonClusterList'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonNodepool resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonNodepoolList'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonCluster resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonClusterList'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonNodepool resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonNodepoolList'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonCluster resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonClusterList'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonCluster' that identifies the schema
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the Kubernetes cluster
		Spec struct {
			// ClusterNetwork Network configuration for the cluster
			ClusterNetwork *struct {
				// Pods Network ranges from which Pod networks are allocated
				Pods *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"pods"`

				// Services Network ranges from which service VIPs are allocated
				Services *struct {
					// CidrBlocks List of CIDR blocks
					CidrBlocks []string `json:"cidrBlocks"`
				} `json:"services"`
			} `json:"clusterNetwork"`

			// Infra Infrastructure configuration for the cluster
			Infra struct {
				// VPC Virtual Private Cloud Network that the cluster is created in
				VPC string `json:"VPC"`

				// Subnet Engine sub-network that the cluster is created in
				Subnet string `json:"subnet"`

				// Version Control-plane version configuration
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"infra"`
		} `json:"spec"`

		// Status Current observed state of the cluster
		Status struct {
			// Conditions Current conditions of the cluster
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// KubeconfigSecretName Reference to the kubeconfig secret
			KubeconfigSecretName *struct {
				// Name Name of the referenced object
				Name string `json:"name"`
			} `json:"kubeconfigSecretName"`

			// Phase Current phase of the cluster
			Phase PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the cluster is ready for use
			Ready bool `json:"ready"`

			// ReadyReplicas Number of ready replicas
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of unavailable replicas
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of updated replicas
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion string `json:"apiVersion"`

		// Items Collection of SotoonNodepool resources
		Items []struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		} `json:"items"`

		// Kind The string value 'SotoonNodepoolList'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

		// Metadata Standard metadata fields for the list
		Metadata struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
	}
	JSON409 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ApiVersion Version identifier of the API schema
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

		// Kind The string value 'SotoonNodepool' that identifies the schema
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

		// Metadata Standard resource metadata fields
		Metadata struct {
			// Annotations Annotations store additional metadata about the resource
			Annotations map[string]string `json:"annotations"`

			// CreationTimestamp Timestamp when the resource was initially created
			CreationTimestamp interface{} `json:"creationTimestamp"`

			// DeletionTimestamp Timestamp when the resource was marked for deletion
			DeletionTimestamp interface{} `json:"deletionTimestamp"`

			// Labels Labels are key-value pairs attached to resources for organization and categorization
			Labels map[string]string `json:"labels"`

			// Name User-provided name that uniquely identifies the resource within its workspace
			Name string `json:"name"`

			// ResourceVersion Internal version for optimistic concurrency control
			ResourceVersion *string `json:"resourceVersion,omitempty"`

			// Uid System-generated unique identifier for the resource
			Uid string `json:"uid"`

			// Workspace Unique identifier of the workspace where the resource belongs
			Workspace string `json:"workspace"`
		} `json:"metadata"`

		// Spec Desired configuration for the nodepool
		Spec struct {
			// AllowedUnsafeSysctls List of allowed unsafe sysctls
			AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

			// ClusterName Name of the cluster this nodepool belongs to
			ClusterName string `json:"clusterName"`

			// Cri Container runtime configuration
			Cri *struct {
				// Runtime Container runtime to use
				Runtime PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
			} `json:"cri"`

			// Labels Labels to apply to worker nodes
			Labels *map[string]string `json:"labels,omitempty"`

			// Replicas Number of worker nodes desired in the nodepool
			Replicas int32 `json:"replicas"`

			// Template Template configuration for worker nodes
			Template struct {
				// IamEnabled Enable IAM integration for nodes
				IamEnabled bool `json:"iamEnabled"`

				// InstanceType Instance type for worker nodes in Engine
				InstanceType string `json:"instanceType"`
			} `json:"template"`

			// Version Kubernetes and SKE patch version configuration for worker machines
			Version struct {
				// KubernetesVersion Kubernetes version
				KubernetesVersion string `json:"kubernetesVersion"`

				// PatchVersion SKE patch version
				PatchVersion string `json:"patchVersion"`
			} `json:"version"`
		} `json:"spec"`

		// Status Current observed state of the nodepool
		Status struct {
			// AvailableReplicas Number of replicas available for scheduling
			AvailableReplicas int32 `json:"availableReplicas"`

			// Conditions Current conditions of the nodepool
			Conditions *[]struct {
				LastTransitionTime interface{} `json:"lastTransitionTime"`
				Message            string      `json:"message"`
				ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
				Reason             string      `json:"reason"`
				Status             string      `json:"status"`
				Type               string      `json:"type"`
			} `json:"conditions,omitempty"`

			// Phase Current phase of scaling operation
			Phase PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

			// Ready Indicates if the nodepool is ready
			Ready bool `json:"ready"`

			// ReadyReplicas Number of replicas that are ready to serve traffic
			ReadyReplicas int32 `json:"readyReplicas"`

			// Replicas Current total number of replicas
			Replicas int32 `json:"replicas"`

			// UnavailableReplicas Number of replicas currently unavailable
			UnavailableReplicas int32 `json:"unavailableReplicas"`

			// UpdatedReplicas Number of replicas updated to the latest spec
			UpdatedReplicas int32 `json:"updatedReplicas"`
		} `json:"status"`
	}
	JSON400 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
	}
	JSON401 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
	}
	JSON403 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
	}
	JSON404 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
	}
	JSON422 *struct {
		// ApiVersion Version of the Status kind
		ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

		// Code HTTP status code corresponding to this status
		Code int32 `json:"code"`

		// Kind Value is always 'Status'
		Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

		// Message Human-readable description of the status
		Message *string `json:"message,omitempty"`

		// Metadata Standard metadata fields
		Metadata *struct {
			Continue           *string `json:"continue,omitempty"`
			RemainingItemCount *int64  `json:"remainingItemCount"`
			ResourceVersion    *string `json:"resourceVersion,omitempty"`
			SelfLink           *string `json:"selfLink,omitempty"`
		} `json:"metadata,omitempty"`

		// Reason Machine-readable description of the cause
		Reason *string `json:"reason,omitempty"`

		// Status Status of the operation
		Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
	}
}
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind string
type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status string

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonCluster resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonCluster' that identifies the schema
				Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the Kubernetes cluster
				Spec struct {
					// ClusterNetwork Network configuration for the cluster
					ClusterNetwork *struct {
						// Pods Network ranges from which Pod networks are allocated
						Pods *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"pods"`

						// Services Network ranges from which service VIPs are allocated
						Services *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"services"`
					} `json:"clusterNetwork"`

					// Infra Infrastructure configuration for the cluster
					Infra struct {
						// VPC Virtual Private Cloud Network that the cluster is created in
						VPC string `json:"VPC"`

						// Subnet Engine sub-network that the cluster is created in
						Subnet string `json:"subnet"`

						// Version Control-plane version configuration
						Version struct {
							// KubernetesVersion Kubernetes version
							KubernetesVersion string `json:"kubernetesVersion"`

							// PatchVersion SKE patch version
							PatchVersion string `json:"patchVersion"`
						} `json:"version"`
					} `json:"infra"`
				} `json:"spec"`

				// Status Current observed state of the cluster
				Status struct {
					// Conditions Current conditions of the cluster
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// KubeconfigSecretName Reference to the kubeconfig secret
					KubeconfigSecretName *struct {
						// Name Name of the referenced object
						Name string `json:"name"`
					} `json:"kubeconfigSecretName"`

					// Phase Current phase of the cluster
					Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the cluster is ready for use
					Ready bool `json:"ready"`

					// ReadyReplicas Number of ready replicas
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of unavailable replicas
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of updated replicas
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonClusterList'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonNodepool resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonNodepool' that identifies the schema
				Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the nodepool
				Spec struct {
					// AllowedUnsafeSysctls List of allowed unsafe sysctls
					AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

					// ClusterName Name of the cluster this nodepool belongs to
					ClusterName string `json:"clusterName"`

					// Cri Container runtime configuration
					Cri *struct {
						// Runtime Container runtime to use
						Runtime GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
					} `json:"cri"`

					// Labels Labels to apply to worker nodes
					Labels *map[string]string `json:"labels,omitempty"`

					// Replicas Number of worker nodes desired in the nodepool
					Replicas int32 `json:"replicas"`

					// Template Template configuration for worker nodes
					Template struct {
						// IamEnabled Enable IAM integration for nodes
						IamEnabled bool `json:"iamEnabled"`

						// InstanceType Instance type for worker nodes in Engine
						InstanceType string `json:"instanceType"`
					} `json:"template"`

					// Version Kubernetes and SKE patch version configuration for worker machines
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"spec"`

				// Status Current observed state of the nodepool
				Status struct {
					// AvailableReplicas Number of replicas available for scheduling
					AvailableReplicas int32 `json:"availableReplicas"`

					// Conditions Current conditions of the nodepool
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// Phase Current phase of scaling operation
					Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the nodepool is ready
					Ready bool `json:"ready"`

					// ReadyReplicas Number of replicas that are ready to serve traffic
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Current total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of replicas currently unavailable
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of replicas updated to the latest spec
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonNodepoolList'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonCluster resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonCluster' that identifies the schema
				Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the Kubernetes cluster
				Spec struct {
					// ClusterNetwork Network configuration for the cluster
					ClusterNetwork *struct {
						// Pods Network ranges from which Pod networks are allocated
						Pods *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"pods"`

						// Services Network ranges from which service VIPs are allocated
						Services *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"services"`
					} `json:"clusterNetwork"`

					// Infra Infrastructure configuration for the cluster
					Infra struct {
						// VPC Virtual Private Cloud Network that the cluster is created in
						VPC string `json:"VPC"`

						// Subnet Engine sub-network that the cluster is created in
						Subnet string `json:"subnet"`

						// Version Control-plane version configuration
						Version struct {
							// KubernetesVersion Kubernetes version
							KubernetesVersion string `json:"kubernetesVersion"`

							// PatchVersion SKE patch version
							PatchVersion string `json:"patchVersion"`
						} `json:"version"`
					} `json:"infra"`
				} `json:"spec"`

				// Status Current observed state of the cluster
				Status struct {
					// Conditions Current conditions of the cluster
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// KubeconfigSecretName Reference to the kubeconfig secret
					KubeconfigSecretName *struct {
						// Name Name of the referenced object
						Name string `json:"name"`
					} `json:"kubeconfigSecretName"`

					// Phase Current phase of the cluster
					Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the cluster is ready for use
					Ready bool `json:"ready"`

					// ReadyReplicas Number of ready replicas
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of unavailable replicas
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of updated replicas
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonClusterList'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonNodepool resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonNodepool' that identifies the schema
				Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the nodepool
				Spec struct {
					// AllowedUnsafeSysctls List of allowed unsafe sysctls
					AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

					// ClusterName Name of the cluster this nodepool belongs to
					ClusterName string `json:"clusterName"`

					// Cri Container runtime configuration
					Cri *struct {
						// Runtime Container runtime to use
						Runtime GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
					} `json:"cri"`

					// Labels Labels to apply to worker nodes
					Labels *map[string]string `json:"labels,omitempty"`

					// Replicas Number of worker nodes desired in the nodepool
					Replicas int32 `json:"replicas"`

					// Template Template configuration for worker nodes
					Template struct {
						// IamEnabled Enable IAM integration for nodes
						IamEnabled bool `json:"iamEnabled"`

						// InstanceType Instance type for worker nodes in Engine
						InstanceType string `json:"instanceType"`
					} `json:"template"`

					// Version Kubernetes and SKE patch version configuration for worker machines
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"spec"`

				// Status Current observed state of the nodepool
				Status struct {
					// AvailableReplicas Number of replicas available for scheduling
					AvailableReplicas int32 `json:"availableReplicas"`

					// Conditions Current conditions of the nodepool
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// Phase Current phase of scaling operation
					Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the nodepool is ready
					Ready bool `json:"ready"`

					// ReadyReplicas Number of replicas that are ready to serve traffic
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Current total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of replicas currently unavailable
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of replicas updated to the latest spec
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonNodepoolList'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonCluster resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonCluster' that identifies the schema
				Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the Kubernetes cluster
				Spec struct {
					// ClusterNetwork Network configuration for the cluster
					ClusterNetwork *struct {
						// Pods Network ranges from which Pod networks are allocated
						Pods *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"pods"`

						// Services Network ranges from which service VIPs are allocated
						Services *struct {
							// CidrBlocks List of CIDR blocks
							CidrBlocks []string `json:"cidrBlocks"`
						} `json:"services"`
					} `json:"clusterNetwork"`

					// Infra Infrastructure configuration for the cluster
					Infra struct {
						// VPC Virtual Private Cloud Network that the cluster is created in
						VPC string `json:"VPC"`

						// Subnet Engine sub-network that the cluster is created in
						Subnet string `json:"subnet"`

						// Version Control-plane version configuration
						Version struct {
							// KubernetesVersion Kubernetes version
							KubernetesVersion string `json:"kubernetesVersion"`

							// PatchVersion SKE patch version
							PatchVersion string `json:"patchVersion"`
						} `json:"version"`
					} `json:"infra"`
				} `json:"spec"`

				// Status Current observed state of the cluster
				Status struct {
					// Conditions Current conditions of the cluster
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// KubeconfigSecretName Reference to the kubeconfig secret
					KubeconfigSecretName *struct {
						// Name Name of the referenced object
						Name string `json:"name"`
					} `json:"kubeconfigSecretName"`

					// Phase Current phase of the cluster
					Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the cluster is ready for use
					Ready bool `json:"ready"`

					// ReadyReplicas Number of ready replicas
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of unavailable replicas
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of updated replicas
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonClusterList'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters201StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonCluster' that identifies the schema
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the Kubernetes cluster
			Spec struct {
				// ClusterNetwork Network configuration for the cluster
				ClusterNetwork *struct {
					// Pods Network ranges from which Pod networks are allocated
					Pods *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"pods"`

					// Services Network ranges from which service VIPs are allocated
					Services *struct {
						// CidrBlocks List of CIDR blocks
						CidrBlocks []string `json:"cidrBlocks"`
					} `json:"services"`
				} `json:"clusterNetwork"`

				// Infra Infrastructure configuration for the cluster
				Infra struct {
					// VPC Virtual Private Cloud Network that the cluster is created in
					VPC string `json:"VPC"`

					// Subnet Engine sub-network that the cluster is created in
					Subnet string `json:"subnet"`

					// Version Control-plane version configuration
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"infra"`
			} `json:"spec"`

			// Status Current observed state of the cluster
			Status struct {
				// Conditions Current conditions of the cluster
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// KubeconfigSecretName Reference to the kubeconfig secret
				KubeconfigSecretName *struct {
					// Name Name of the referenced object
					Name string `json:"name"`
				} `json:"kubeconfigSecretName"`

				// Phase Current phase of the cluster
				Phase PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the cluster is ready for use
				Ready bool `json:"ready"`

				// ReadyReplicas Number of ready replicas
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of unavailable replicas
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of updated replicas
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion string `json:"apiVersion"`

			// Items Collection of SotoonNodepool resources
			Items []struct {
				// ApiVersion Version identifier of the API schema
				ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsApiVersion `json:"apiVersion"`

				// Kind The string value 'SotoonNodepool' that identifies the schema
				Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsKind `json:"kind"`

				// Metadata Standard resource metadata fields
				Metadata struct {
					// Annotations Annotations store additional metadata about the resource
					Annotations map[string]string `json:"annotations"`

					// CreationTimestamp Timestamp when the resource was initially created
					CreationTimestamp interface{} `json:"creationTimestamp"`

					// DeletionTimestamp Timestamp when the resource was marked for deletion
					DeletionTimestamp interface{} `json:"deletionTimestamp"`

					// Labels Labels are key-value pairs attached to resources for organization and categorization
					Labels map[string]string `json:"labels"`

					// Name User-provided name that uniquely identifies the resource within its workspace
					Name string `json:"name"`

					// ResourceVersion Internal version for optimistic concurrency control
					ResourceVersion *string `json:"resourceVersion,omitempty"`

					// Uid System-generated unique identifier for the resource
					Uid string `json:"uid"`

					// Workspace Unique identifier of the workspace where the resource belongs
					Workspace string `json:"workspace"`
				} `json:"metadata"`

				// Spec Desired configuration for the nodepool
				Spec struct {
					// AllowedUnsafeSysctls List of allowed unsafe sysctls
					AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

					// ClusterName Name of the cluster this nodepool belongs to
					ClusterName string `json:"clusterName"`

					// Cri Container runtime configuration
					Cri *struct {
						// Runtime Container runtime to use
						Runtime GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsSpecCriRuntime `json:"runtime"`
					} `json:"cri"`

					// Labels Labels to apply to worker nodes
					Labels *map[string]string `json:"labels,omitempty"`

					// Replicas Number of worker nodes desired in the nodepool
					Replicas int32 `json:"replicas"`

					// Template Template configuration for worker nodes
					Template struct {
						// IamEnabled Enable IAM integration for nodes
						IamEnabled bool `json:"iamEnabled"`

						// InstanceType Instance type for worker nodes in Engine
						InstanceType string `json:"instanceType"`
					} `json:"template"`

					// Version Kubernetes and SKE patch version configuration for worker machines
					Version struct {
						// KubernetesVersion Kubernetes version
						KubernetesVersion string `json:"kubernetesVersion"`

						// PatchVersion SKE patch version
						PatchVersion string `json:"patchVersion"`
					} `json:"version"`
				} `json:"spec"`

				// Status Current observed state of the nodepool
				Status struct {
					// AvailableReplicas Number of replicas available for scheduling
					AvailableReplicas int32 `json:"availableReplicas"`

					// Conditions Current conditions of the nodepool
					Conditions *[]struct {
						LastTransitionTime interface{} `json:"lastTransitionTime"`
						Message            string      `json:"message"`
						ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
						Reason             string      `json:"reason"`
						Status             string      `json:"status"`
						Type               string      `json:"type"`
					} `json:"conditions,omitempty"`

					// Phase Current phase of scaling operation
					Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200ItemsStatusPhase `json:"phase"`

					// Ready Indicates if the nodepool is ready
					Ready bool `json:"ready"`

					// ReadyReplicas Number of replicas that are ready to serve traffic
					ReadyReplicas int32 `json:"readyReplicas"`

					// Replicas Current total number of replicas
					Replicas int32 `json:"replicas"`

					// UnavailableReplicas Number of replicas currently unavailable
					UnavailableReplicas int32 `json:"unavailableReplicas"`

					// UpdatedReplicas Number of replicas updated to the latest spec
					UpdatedReplicas int32 `json:"updatedReplicas"`
				} `json:"status"`
			} `json:"items"`

			// Kind The string value 'SotoonNodepoolList'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools200Kind `json:"kind"`

			// Metadata Standard metadata fields for the list
			Metadata struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools201StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools409Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ApiVersion Version identifier of the API schema
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200ApiVersion `json:"apiVersion"`

			// Kind The string value 'SotoonNodepool' that identifies the schema
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200Kind `json:"kind"`

			// Metadata Standard resource metadata fields
			Metadata struct {
				// Annotations Annotations store additional metadata about the resource
				Annotations map[string]string `json:"annotations"`

				// CreationTimestamp Timestamp when the resource was initially created
				CreationTimestamp interface{} `json:"creationTimestamp"`

				// DeletionTimestamp Timestamp when the resource was marked for deletion
				DeletionTimestamp interface{} `json:"deletionTimestamp"`

				// Labels Labels are key-value pairs attached to resources for organization and categorization
				Labels map[string]string `json:"labels"`

				// Name User-provided name that uniquely identifies the resource within its workspace
				Name string `json:"name"`

				// ResourceVersion Internal version for optimistic concurrency control
				ResourceVersion *string `json:"resourceVersion,omitempty"`

				// Uid System-generated unique identifier for the resource
				Uid string `json:"uid"`

				// Workspace Unique identifier of the workspace where the resource belongs
				Workspace string `json:"workspace"`
			} `json:"metadata"`

			// Spec Desired configuration for the nodepool
			Spec struct {
				// AllowedUnsafeSysctls List of allowed unsafe sysctls
				AllowedUnsafeSysctls *[]string `json:"allowedUnsafeSysctls,omitempty"`

				// ClusterName Name of the cluster this nodepool belongs to
				ClusterName string `json:"clusterName"`

				// Cri Container runtime configuration
				Cri *struct {
					// Runtime Container runtime to use
					Runtime PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200SpecCriRuntime `json:"runtime"`
				} `json:"cri"`

				// Labels Labels to apply to worker nodes
				Labels *map[string]string `json:"labels,omitempty"`

				// Replicas Number of worker nodes desired in the nodepool
				Replicas int32 `json:"replicas"`

				// Template Template configuration for worker nodes
				Template struct {
					// IamEnabled Enable IAM integration for nodes
					IamEnabled bool `json:"iamEnabled"`

					// InstanceType Instance type for worker nodes in Engine
					InstanceType string `json:"instanceType"`
				} `json:"template"`

				// Version Kubernetes and SKE patch version configuration for worker machines
				Version struct {
					// KubernetesVersion Kubernetes version
					KubernetesVersion string `json:"kubernetesVersion"`

					// PatchVersion SKE patch version
					PatchVersion string `json:"patchVersion"`
				} `json:"version"`
			} `json:"spec"`

			// Status Current observed state of the nodepool
			Status struct {
				// AvailableReplicas Number of replicas available for scheduling
				AvailableReplicas int32 `json:"availableReplicas"`

				// Conditions Current conditions of the nodepool
				Conditions *[]struct {
					LastTransitionTime interface{} `json:"lastTransitionTime"`
					Message            string      `json:"message"`
					ObservedGeneration *int64      `json:"observedGeneration,omitempty"`
					Reason             string      `json:"reason"`
					Status             string      `json:"status"`
					Type               string      `json:"type"`
				} `json:"conditions,omitempty"`

				// Phase Current phase of scaling operation
				Phase PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId200StatusPhase `json:"phase"`

				// Ready Indicates if the nodepool is ready
				Ready bool `json:"ready"`

				// ReadyReplicas Number of replicas that are ready to serve traffic
				ReadyReplicas int32 `json:"readyReplicas"`

				// Replicas Current total number of replicas
				Replicas int32 `json:"replicas"`

				// UnavailableReplicas Number of replicas currently unavailable
				UnavailableReplicas int32 `json:"unavailableReplicas"`

				// UpdatedReplicas Number of replicas updated to the latest spec
				UpdatedReplicas int32 `json:"updatedReplicas"`
			} `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId400Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId401Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId403Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId404Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest struct {
			// ApiVersion Version of the Status kind
			ApiVersion PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422ApiVersion `json:"apiVersion"`

			// Code HTTP status code corresponding to this status
			Code int32 `json:"code"`

			// Kind Value is always 'Status'
			Kind PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Kind `json:"kind"`

			// Message Human-readable description of the status
			Message *string `json:"message,omitempty"`

			// Metadata Standard metadata fields
			Metadata *struct {
				Continue           *string `json:"continue,omitempty"`
				RemainingItemCount *int64  `json:"remainingItemCount"`
				ResourceVersion    *string `json:"resourceVersion,omitempty"`
				SelfLink           *string `json:"selfLink,omitempty"`
			} `json:"metadata,omitempty"`

			// Reason Machine-readable description of the cause
			Reason *string `json:"reason,omitempty"`

			// Status Status of the operation
			Status PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId422Status `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
