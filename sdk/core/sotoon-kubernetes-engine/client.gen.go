// Package sotoon_kubernetes_engine provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sotoon_kubernetes_engine

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId request
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(c.Server, workspaceUUID, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(c.Server, workspaceUUID, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(c.Server, workspaceUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-free/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-premium/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/machines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonaddons/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest calls the generic PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId with any type of body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonclusters/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequest(server string, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest calls the generic PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId builder with application/json body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequest(server string, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server, workspaceUUID, resourceId, "application/json", bodyReader)
}

// NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody generates requests for PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId with any type of body
func NewPutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdRequestWithBody(server string, workspaceUUID string, resourceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/sotoonnodepools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest generates requests for PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets
func NewPostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest generates requests for GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId
func NewGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdRequest(server string, workspaceUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ske/v2alpha1/thr1-standard/workspaces/%s/usersecrets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error)

	// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with any body
	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request
	PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error)

	// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request
	GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error)
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonClusterList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepoolList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonClusterList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepoolList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonClusterList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonCluster
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepoolList
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON409      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerStatus
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerSotoonNodepool
	JSON400      *ContainerStatus
	JSON401      *ContainerStatus
	JSON403      *ContainerStatus
	JSON404      *ContainerStatus
	JSON422      *ContainerStatus
}

// Status returns HTTPResponse.Status
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachines(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddons(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse request returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclusters(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse(ctx context.Context, workspaceUUID string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepools(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp)
}

// DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse request with arbitrary body returning *PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse
func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBodyWithResponse(ctx context.Context, workspaceUUID string, resourceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithBody(ctx, workspaceUUID, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, body PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	rsp, err := c.PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceId(ctx, workspaceUUID, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse request returning *PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse
func (c *ClientWithResponses) PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	rsp, err := c.PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecrets(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp)
}

// GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse request returning *GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse
func (c *ClientWithResponses) GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse(ctx context.Context, workspaceUUID string, resourceId string, reqEditors ...RequestEditorFn) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	rsp, err := c.GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceId(ctx, workspaceUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp)
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepoolList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1FreeWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepoolList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1PremiumWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDMachinesResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonaddonsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonclustersResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepoolList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseDeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse parses an HTTP response from a PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdWithResponse call
func ParsePutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse(rsp *http.Response) (*PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDSotoonnodepoolsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerSotoonNodepool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ContainerStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse parses an HTTP response from a PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsWithResponse call
func ParsePostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse(rsp *http.Response) (*PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse parses an HTTP response from a GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdWithResponse call
func ParseGetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse(rsp *http.Response) (*GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkeV2alpha1Thr1StandardWorkspacesWorkspaceUUIDUsersecretsResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
