// Package iam provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package iam

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Bearer_TokenScopes = "Bearer_Token.Scopes"
)

// Empty defines model for .
type Empty struct {
	Detail string `json:"detail"`
}

// IamBackupKey defines model for iamBackupKey.
type IamBackupKey struct {
	// CreatedAt Timestamp when the backup key was created
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Timestamp when the backup key was deleted
	DeletedAt time.Time `json:"deleted_at"`

	// Key The SSH key content in SSH format
	Key       string `json:"key"`
	PublicKey string `json:"public_key"`

	// Title Title or name for the backup key
	Title string `json:"title"`
	Type  string `json:"type"`

	// Uuid Unique identifier for the backup key
	Uuid string `json:"uuid"`

	// Workspace The workspace this backup key belongs to
	Workspace string `json:"workspace"`
}

// IamBulkAddRolesRequest defines model for iamBulkAddRolesRequest.
type IamBulkAddRolesRequest struct {
	// Roles List of roles to assign to the group
	Roles []IamRoleItem `json:"roles"`
}

// IamBulkAddRulesRequest defines model for iamBulkAddRulesRequest.
type IamBulkAddRulesRequest struct {
	// RulesUuidList List of UUIDs of the Rule objects to add to the role
	RulesUuidList []string `json:"rules_uuid_list"`
}

// IamBulkAddServiceUsersRequest defines model for iamBulkAddServiceUsersRequest.
type IamBulkAddServiceUsersRequest struct {
	// ServiceUsers List of service user UUIDs to add to the group
	ServiceUsers []string `json:"service_users"`
}

// IamBulkAddServiceUsersToRoleRequest defines model for iamBulkAddServiceUsersToRoleRequest.
type IamBulkAddServiceUsersToRoleRequest struct {
	// Items List of items needed for role bindings
	Items *[]map[string]string `json:"items,omitempty"`

	// ServiceUsers List of service user UUIDs to assign to the role
	ServiceUsers []string `json:"service_users"`
}

// IamBulkAddUsersRequest defines model for iamBulkAddUsersRequest.
type IamBulkAddUsersRequest struct {
	// Users List of user UUIDs to add to the group
	Users []string `json:"users"`
}

// IamBulkAddUsersToRoleRequest defines model for iamBulkAddUsersToRoleRequest.
type IamBulkAddUsersToRoleRequest struct {
	// Items List of items needed for role bindings
	Items *[]map[string]string `json:"items,omitempty"`

	// Users List of user UUIDs to assign to the role
	Users []string `json:"users"`
}

// IamChallenge defines model for iamChallenge.
type IamChallenge struct {
	ChallengeAnswer string `json:"challenge_answer"`

	// ChallengeToken Token to be used when responding to the challenge
	ChallengeToken string `json:"challenge_token"`

	// ChallengeType Type of challenge (e.g., 'otp', 'sms')
	ChallengeType string `json:"challenge_type"`
}

// IamChallengeRequest defines model for iamChallengeRequest.
type IamChallengeRequest struct {
	// ChallengeAnswer Answer to the challenge
	ChallengeAnswer string `json:"challenge_answer"`

	// ChallengeToken Token received from the challenge request
	ChallengeToken string `json:"challenge_token"`

	// Remember Whether to create a long-lived token
	Remember bool `json:"remember"`
}

// IamChangePasswordRequest defines model for iamChangePasswordRequest.
type IamChangePasswordRequest struct {
	// Password New password for the user
	Password string `json:"password"`
}

// IamCreateRole defines model for iamCreateRole.
type IamCreateRole struct {
	DescriptionEn string       `json:"description_en"`
	DescriptionFa string       `json:"description_fa"`
	Name          string       `json:"name"`
	Service       string       `json:"service"`
	WarningEn     string       `json:"warning_en"`
	WarningFa     string       `json:"warning_fa"`
	Workspace     IamWorkspace `json:"workspace"`
}

// IamCreateUser defines model for iamCreateUser.
type IamCreateUser struct {
	// Birthday Birthday of the user
	Birthday string `json:"birthday"`

	// Email Email address of the user
	Email string `json:"email"`

	// EmailVerified Whether the email address is verified
	EmailVerified bool `json:"email_verified"`

	// FirstName First name of the user
	FirstName string `json:"first_name"`

	// IsSuspended Whether the user is suspended
	IsSuspended bool `json:"is_suspended"`

	// LastName Last name of the user
	LastName string `json:"last_name"`

	// Name Full name of the user
	Name string `json:"name"`

	// PhoneNumber Phone number of the user
	PhoneNumber string `json:"phone_number"`

	// PhoneNumberVerified Whether the phone number is verified
	PhoneNumberVerified bool `json:"phone_number_verified"`
}

// IamCreateUserKiseKey defines model for iamCreateUserKiseKey.
type IamCreateUserKiseKey struct {
	AccessKey   string  `json:"access_key"`
	Description string  `json:"description"`
	IsEncrypted bool    `json:"is_encrypted"`
	User        IamUser `json:"user"`

	// Workspace The workspace this KISE key belongs to
	Workspace string `json:"workspace"`
}

// IamError defines model for iamError.
type IamError struct {
	Code    int    `json:"code"`
	Message Empty  `json:"message"`
	Reason  string `json:"reason"`
	Status  string `json:"status"`
}

// IamGroup defines model for iamGroup.
type IamGroup struct {
	// CreatedAt Timestamp when the group was created
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the group's purpose
	Description *string `json:"description,omitempty"`

	// Name Name of the group
	Name string `json:"name"`

	// UpdatedAt Timestamp when the group was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the group
	Uuid      string       `json:"uuid"`
	Workspace IamWorkspace `json:"workspace"`
}

// IamGroupDetail defines model for iamGroupDetail.
type IamGroupDetail struct {
	CreatedAt          time.Time        `json:"created_at"`
	Description        string           `json:"description"`
	Name               string           `json:"name"`
	Roles              []IamRoleMinimal `json:"roles"`
	ServiceUsersNumber int32            `json:"service_users_number"`
	UpdatedAt          time.Time        `json:"updated_at"`

	// UsersNumber number of this group members
	UsersNumber int32        `json:"users_number"`
	Uuid        string       `json:"uuid"`
	Workspace   IamWorkspace `json:"workspace"`
}

// IamGroupMinimal defines model for iamGroupMinimal.
type IamGroupMinimal struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Uuid        string `json:"uuid"`
}

// IamGroupWithMinimalRole defines model for iamGroupWithMinimalRole.
type IamGroupWithMinimalRole struct {
	Description string           `json:"description"`
	Name        string           `json:"name"`
	Roles       []IamRoleMinimal `json:"roles"`
	Uuid        string           `json:"uuid"`
}

// IamHealthzResponse defines model for iamHealthzResponse.
type IamHealthzResponse struct {
	Caches    []IamHealthzResponseDefault `json:"caches"`
	Databases []IamHealthzResponseDefault `json:"databases"`
	Storage   IamHealthzResponseDefault   `json:"storage"`
}

// IamHealthzResponseDefault defines model for iamHealthzResponseDefault.
type IamHealthzResponseDefault struct {
	Default IamHealthzResponseStatus `json:"default"`
}

// IamHealthzResponseStatus defines model for iamHealthzResponseStatus.
type IamHealthzResponseStatus struct {
	Ok bool `json:"ok"`
}

// IamInviteRequest defines model for iamInviteRequest.
type IamInviteRequest struct {
	// Emails List of email addresses to invite to the workspace
	Emails []string `json:"emails"`
}

// IamLoginRequest defines model for iamLoginRequest.
type IamLoginRequest struct {
	// Captcha Captcha response if required
	Captcha *string `json:"captcha,omitempty"`

	// Email Email address of the user
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`

	// Remember Whether to create a long-lived token
	Remember bool `json:"remember"`
}

// IamOpenIdTokenRequest defines model for iamOpenIdTokenRequest.
type IamOpenIdTokenRequest struct {
	// ClientId OAuth 2.0 client identifier
	ClientId string `json:"client_id"`

	// ClientSecret OAuth 2.0 client secret
	ClientSecret string `json:"client_secret"`

	// Code Authorization code for authorization_code grant type
	Code string `json:"code"`

	// GrantType OAuth 2.0 grant type
	GrantType string `json:"grant_type"`

	// Password Password for password grant type
	Password string `json:"password"`

	// RedirectUri Redirect URI for authorization_code grant type
	RedirectUri string `json:"redirect_uri"`

	// RefreshToken Refresh token for refresh_token grant type
	RefreshToken string `json:"refresh_token"`

	// Scope OAuth 2.0 scope
	Scope string `json:"scope"`

	// Username Username for password grant type
	Username string `json:"username"`
}

// IamOpenIdTokenResponse defines model for iamOpenIdTokenResponse.
type IamOpenIdTokenResponse struct {
	// AccessToken OAuth 2.0 access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Number of seconds until the token expires
	ExpiresIn int `json:"expires_in"`

	// IdToken OpenID Connect ID token
	IdToken *string `json:"id_token,omitempty"`

	// RefreshToken OAuth 2.0 refresh token
	RefreshToken *string `json:"refresh_token,omitempty"`

	// TokenType Type of token, typically 'Bearer'
	TokenType string `json:"token_type"`
}

// IamOrganization defines model for iamOrganization.
type IamOrganization struct {
	Address        string `json:"address"`
	City           string `json:"city"`
	CreatedAt      string `json:"created_at"`
	EconomicCode   string `json:"economic_code"`
	EnterpriseName string `json:"enterprise_name"`
	FaxNo          string `json:"fax_no"`
	IsInternal     bool   `json:"is_internal"`
	IsSuspended    bool   `json:"is_suspended"`
	Name           string `json:"name"`
	NameEn         string `json:"name_en"`
	NationalId     string `json:"national_id"`
	Province       string `json:"province"`
	RegistrationNo string `json:"registration_no"`
	TelephoneNo    string `json:"telephone_no"`
	UpdatedAt      string `json:"updated_at"`
	Uuid           string `json:"uuid"`
	ZipCode        string `json:"zip_code"`
}

// IamOtpEnabled defines model for iamOtpEnabled.
type IamOtpEnabled struct {
	// Enabled Whether OTP is enabled for the user
	Enabled bool `json:"enabled"`
}

// IamPasswordResetRequest defines model for iamPasswordResetRequest.
type IamPasswordResetRequest struct {
	// Email Email address of the user account to reset password for
	Email string `json:"email"`
}

// IamRefreshTokenReq defines model for iamRefreshTokenReq.
type IamRefreshTokenReq struct {
	Description string            `json:"description"`
	Name        string            `json:"name"`
	Role        string            `json:"role"`
	RoleItems   map[string]string `json:"role_items"`
}

// IamRefreshTokenResp defines model for iamRefreshTokenResp.
type IamRefreshTokenResp struct {
	Name         string `json:"name"`
	RefreshToken string `json:"refresh_token"`
}

// IamRequestCreateBackupKey defines model for iamRequestCreateBackupKey.
type IamRequestCreateBackupKey struct {
	// Key The SSH key content in SSH format
	Key string `json:"key"`

	// Title Title or name for the backup key
	Title string `json:"title"`
}

// IamRequestCreateGroup defines model for iamRequestCreateGroup.
type IamRequestCreateGroup struct {
	// Description Optional description of the group's purpose
	Description *string `json:"description,omitempty"`

	// Name Name of the group
	Name      string              `json:"name"`
	Workspace IamWorkspaceMinimal `json:"workspace"`
}

// IamRequestCreateUserPublicKey defines model for iamRequestCreateUserPublicKey.
type IamRequestCreateUserPublicKey struct {
	// Key The public key content in SSH format
	Key string `json:"key"`

	// Title Title or name for the public key
	Title string `json:"title"`
}

// IamRequestRuleCreate defines model for iamRequestRuleCreate.
type IamRequestRuleCreate struct {
	Actions       []string            `json:"actions"`
	Deny          bool                `json:"deny"`
	Name          string              `json:"name"`
	Object        string              `json:"object"`
	PossibleItems map[string][]string `json:"possible_items"`
}

// IamReuqestUserTokenCreate defines model for iamReuqestUserTokenCreate.
type IamReuqestUserTokenCreate struct {
	Active bool `json:"active"`

	// ExpiresAt Token expiration timestamp
	ExpiresAt time.Time `json:"expires_at"`
	IsHashed  bool      `json:"is_hashed"`
	Name      string    `json:"name"`
	Secret    string    `json:"secret"`

	// User UUID of the authenticated user
	User string `json:"user"`
}

// IamRole defines model for iamRole.
type IamRole struct {
	// CreatedAt Timestamp when the role was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the role's purpose and permissions
	Description   *string             `json:"description,omitempty"`
	DescriptionEn string              `json:"description_en"`
	DescriptionFa string              `json:"description_fa"`
	Items         []map[string]string `json:"items"`

	// Name Name of the role
	Name          string               `json:"name"`
	PossibleItems *map[string][]string `json:"possible_items,omitempty"`

	// Service Service this role applies to
	Service string `json:"service"`

	// UpdatedAt Timestamp when the role was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the role
	Uuid      string       `json:"uuid"`
	WarningEn string       `json:"warning_en"`
	WarningFa string       `json:"warning_fa"`
	Workspace IamWorkspace `json:"workspace"`
}

// IamRoleBinding defines model for iamRoleBinding.
type IamRoleBinding struct {
	// CreatedAt Timestamp when the role binding was created
	CreatedAt time.Time `json:"created_at"`
	Group     IamGroup  `json:"group"`

	// Items Optional items associated with this role binding
	Items *[]map[string]string `json:"items,omitempty"`
	Role  IamRole              `json:"role"`

	// UpdatedAt Timestamp when the role binding was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the role binding
	Uuid string `json:"uuid"`
}

// IamRoleBindingItems defines model for iamRoleBindingItems.
type IamRoleBindingItems struct {
	// Items Optional items associated with this role binding
	Items *[]map[string]string `json:"items,omitempty"`
}

// IamRoleItem defines model for iamRoleItem.
type IamRoleItem struct {
	// ItemsList List of items for this role
	ItemsList *[]map[string]string `json:"items_list,omitempty"`

	// RoleUuid UUID of the role to assign
	RoleUuid string `json:"role_uuid"`
}

// IamRoleMinimal defines model for iamRoleMinimal.
type IamRoleMinimal struct {
	DescriptionEn string `json:"description_en"`
	DescriptionFa string `json:"description_fa"`
	Name          string `json:"name"`
	Uuid          string `json:"uuid"`
	Workspace     string `json:"workspace"`
}

// IamRoleRule defines model for iamRoleRule.
type IamRoleRule struct {
	// CreatedAt Timestamp when the role-rule binding was created
	CreatedAt time.Time `json:"created_at"`
	Role      IamRole   `json:"role"`
	Rule      IamRule   `json:"rule"`

	// UpdatedAt Timestamp when the role-rule binding was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the role-rule binding
	Uuid string `json:"uuid"`
}

// IamRoleWorkspaceMinimal defines model for iamRoleWorkspaceMinimal.
type IamRoleWorkspaceMinimal struct {
	DescriptionEn string `json:"description_en"`
	DescriptionFa string `json:"description_fa"`
	Name          string `json:"name"`
	Uuid          string `json:"uuid"`
	Workspace     string `json:"workspace"`
}

// IamRule defines model for iamRule.
type IamRule struct {
	// Actions Actions this rule controls (eg: GET,PUT...)
	Actions []string `json:"actions"`

	// CreatedAt Timestamp when the rule was created
	CreatedAt time.Time `json:"created_at"`
	Deny      bool      `json:"deny"`

	// Description Description of the rule's purpose
	Description                    *string `json:"description,omitempty"`
	IsAccessibleByUserDefinedRoles bool    `json:"is_accessible_by_user_defined_roles"`

	// Name Name of the rule
	Name string `json:"name"`

	// Object Resource this rule applies to
	Object        string              `json:"object"`
	PossibleItems map[string][]string `json:"possible_items"`

	// ServiceObject Service this rule applies to
	ServiceObject string `json:"service_object"`

	// UpdatedAt Timestamp when the rule was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the rule
	Uuid      string `json:"uuid"`
	Workspace string `json:"workspace"`
}

// IamService defines model for iamService.
type IamService struct {
	Actions            []string `json:"actions"`
	IsUserCustomizable bool     `json:"is_user_customizable"`
	Name               string   `json:"name"`
	Title              string   `json:"title"`
	Workspace          string   `json:"workspace"`
}

// IamServiceUser defines model for iamServiceUser.
type IamServiceUser struct {
	// CreatedAt Timestamp when the service user was created
	CreatedAt time.Time `json:"created_at"`

	// Description description about this service user
	Description string `json:"description"`

	// Name Name of the service user
	Name string `json:"name"`

	// UpdatedAt Timestamp when the service user was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the service user
	Uuid      string `json:"uuid"`
	Workspace string `json:"workspace"`
}

// IamServiceUserCreate defines model for iamServiceUserCreate.
type IamServiceUserCreate struct {
	// Description Optional description of the service user
	Description *string `json:"description,omitempty"`

	// Name Name of the service user
	Name string `json:"name"`
}

// IamServiceUserDetailed defines model for iamServiceUserDetailed.
type IamServiceUserDetailed struct {
	// CreatedAt Timestamp when the service user was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the service user
	Description *string `json:"description,omitempty"`

	// Groups Groups this service user belongs to
	Groups []IamGroupMinimal `json:"groups"`

	// Name Name of the service user
	Name string `json:"name"`

	// Roles Roles assigned to this service user
	Roles      []IamRoleWorkspaceMinimal `json:"roles"`
	ThirdParty IamThirdPartyForOcean     `json:"third_party"`

	// UpdatedAt Timestamp when the service user was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the service user
	Uuid      string `json:"uuid"`
	Workspace string `json:"workspace"`
}

// IamServiceUserGroup defines model for iamServiceUserGroup.
type IamServiceUserGroup struct {
	Group       IamGroupWithMinimalRole `json:"group"`
	ServiceUser IamServiceUser          `json:"service_user"`
}

// IamServiceUserGroupResponse defines model for iamServiceUserGroupResponse.
type IamServiceUserGroupResponse struct {
	// CreatedAt Timestamp when the service user was added to the group
	CreatedAt   time.Time      `json:"created_at"`
	Group       IamGroup       `json:"group"`
	ServiceUser IamServiceUser `json:"service_user"`

	// Uuid Unique identifier for the service-user-group association
	Uuid string `json:"uuid"`
}

// IamServiceUserKiseKey defines model for iamServiceUserKiseKey.
type IamServiceUserKiseKey struct {
	AccessKey string `json:"access_key"`

	// CreatedAt Timestamp when the KISE key was created
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	IsEncrypted bool      `json:"is_encrypted"`
	SecretKey   string    `json:"secret_key"`

	// ServiceUser The service user this KISE key belongs to
	ServiceUser string `json:"service_user"`

	// UpdatedAt Timestamp when the KISE key was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the KISE key
	Uuid string `json:"uuid"`
}

// IamServiceUserPublicKey defines model for iamServiceUserPublicKey.
type IamServiceUserPublicKey struct {
	// CreatedAt Timestamp when the public key was created
	CreatedAt time.Time `json:"created_at"`

	// Key The public key content in SSH format
	Key         string         `json:"key"`
	PublicKey   string         `json:"public_key"`
	ServiceUser IamServiceUser `json:"service_user"`

	// Title Title or name for the public key
	Title string `json:"title"`
	Type  string `json:"type"`

	// UpdatedAt Timestamp when the public key was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the public key
	Uuid string `json:"uuid"`
}

// IamServiceUserPublicKeyCreate defines model for iamServiceUserPublicKeyCreate.
type IamServiceUserPublicKeyCreate struct {
	// Key The public key content in SSH format
	Key string `json:"key"`

	// Title Title or name for the public key
	Title string `json:"title"`
}

// IamServiceUserRoleBindingDetailed defines model for iamServiceUserRoleBindingDetailed.
type IamServiceUserRoleBindingDetailed struct {
	// CreatedAt Timestamp when the binding was created
	CreatedAt time.Time `json:"created_at"`

	// Items Optional items associated with this role binding
	Items       *[]map[string]string `json:"items,omitempty"`
	Role        IamRole              `json:"role"`
	ServiceUser IamServiceUser       `json:"service_user"`

	// UpdatedAt Timestamp when the binding was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the service-user-role binding
	Uuid string `json:"uuid"`

	// Workspace The workspace in which the binding exists
	Workspace string `json:"workspace"`
}

// IamServiceUserRoleBindingMinimal defines model for iamServiceUserRoleBindingMinimal.
type IamServiceUserRoleBindingMinimal struct {
	Items       []map[string]string `json:"items"`
	Role        string              `json:"role"`
	ServiceUser string              `json:"service_user"`
	Workspace   string              `json:"workspace"`
}

// IamServiceUserToken defines model for iamServiceUserToken.
type IamServiceUserToken struct {
	// CreatedAt Timestamp when the token was created
	CreatedAt time.Time `json:"created_at"`

	// ExpiresAt Timestamp when the token will expire
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	IsHashed  bool       `json:"is_hashed"`

	// Name Name of the token
	Name string `json:"name"`

	// ServiceUser The service user this token belongs to
	ServiceUser string `json:"service_user"`

	// UpdatedAt Timestamp when the token was updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Uuid Unique identifier for the token
	Uuid string `json:"uuid"`
}

// IamServiceUserTokenWithSecret defines model for iamServiceUserTokenWithSecret.
type IamServiceUserTokenWithSecret struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// ExpiresAt Timestamp when the token will expire
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	IsHashed  bool       `json:"is_hashed"`

	// Name Name of the token
	Name      string     `json:"name"`
	Secret    *string    `json:"secret,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Uuid      *string    `json:"uuid,omitempty"`
}

// IamServiceUserWithRoleItems defines model for iamServiceUserWithRoleItems.
type IamServiceUserWithRoleItems struct {
	CreatedAt   time.Time           `json:"created_at"`
	Description string              `json:"description"`
	Items       []map[string]string `json:"items"`
	Name        string              `json:"name"`
	UpdatedAt   time.Time           `json:"updated_at"`
	Uuid        string              `json:"uuid"`
}

// IamThirdPartyForOcean defines model for iamThirdPartyForOcean.
type IamThirdPartyForOcean struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

// IamThirdPartyTokenRequest defines model for iamThirdPartyTokenRequest.
type IamThirdPartyTokenRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// IamThirdPartyTokenResponse defines model for iamThirdPartyTokenResponse.
type IamThirdPartyTokenResponse struct {
	// ExpiresAt Number of seconds until the token expires
	ExpiresAt *int `json:"expires_at,omitempty"`

	// RefreshToken Refresh token for the third-party service
	RefreshToken time.Time `json:"refresh_token"`
	Secret       string    `json:"secret"`
}

// IamUser defines model for iamUser.
type IamUser struct {
	// Birthday Birthday of the user
	Birthday string `json:"birthday"`

	// CreatedAt Timestamp when the user was created
	CreatedAt time.Time `json:"created_at"`

	// Email Email address of the user
	Email string `json:"email"`

	// EmailVerified Whether the email address is verified
	EmailVerified bool `json:"email_verified"`

	// FirstName First name of the user
	FirstName string `json:"first_name"`

	// IsOtpEnabled Whether the user has OTP enabled
	IsOtpEnabled bool `json:"is_otp_enabled"`

	// IsSuspended Whether the user is suspended
	IsSuspended bool `json:"is_suspended"`

	// LastName Last name of the user
	LastName string `json:"last_name"`

	// Name Full name of the user
	Name string `json:"name"`

	// PhoneNumber Phone number of the user
	PhoneNumber string `json:"phone_number"`

	// PhoneNumberVerified Whether the phone number is verified
	PhoneNumberVerified bool `json:"phone_number_verified"`

	// UpdatedAt Timestamp when the user was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// UserType Type of the user (exactly one of 'user' or 'service-user')
	UserType string `json:"user_type"`

	// Uuid UUID of the user
	Uuid string `json:"uuid"`
}

// IamUserAcceptInvitation defines model for iamUserAcceptInvitation.
type IamUserAcceptInvitation struct {
	// Name Full name of the user
	Name string `json:"name"`

	// Password Password for the new account
	Password string `json:"password"`
}

// IamUserBulkCanRequestItem defines model for iamUserBulkCanRequestItem.
type IamUserBulkCanRequestItem struct {
	// Actions List of actions to check permissions for
	Actions []string `json:"actions"`

	// Path The path within the service to check permissions for
	Path string `json:"path"`

	// Service The service name to check permissions for
	Service string `json:"service"`
}

// IamUserBulkCanResponseItem defines model for iamUserBulkCanResponseItem.
type IamUserBulkCanResponseItem struct {
	// Actions List of actions that were checked
	Actions []string `json:"actions"`

	// Allowed Whether the user is allowed to perform the actions on the specified service and path
	Allowed bool `json:"allowed"`

	// Path The path within the service that was checked
	Path string `json:"path"`

	// Service The service name that was checked
	Service string `json:"service"`
}

// IamUserGroup defines model for iamUserGroup.
type IamUserGroup struct {
	Group IamGroupWithMinimalRole `json:"group"`
	User  IamUser                 `json:"user"`
}

// IamUserInvitation defines model for iamUserInvitation.
type IamUserInvitation struct {
	CreatedAt       time.Time `json:"created_at"`
	Email           string    `json:"email"`
	InvitationToken string    `json:"invitation_token"`
	IsSuspended     bool      `json:"is_suspended"`
	Name            string    `json:"name"`
	Uuid            string    `json:"uuid"`
}

// IamUserKiseKey defines model for iamUserKiseKey.
type IamUserKiseKey struct {
	AccessKey string `json:"access_key"`

	// CreatedAt Timestamp when the KISE key was created
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	IsEncrypted bool      `json:"is_encrypted"`
	SecretKey   string    `json:"secret_key"`

	// UpdatedAt Timestamp when the KISE key was last updated
	UpdatedAt time.Time `json:"updated_at"`
	User      IamUser   `json:"user"`

	// Uuid Unique identifier for the KISE key
	Uuid string `json:"uuid"`

	// Workspace The workspace this KISE key belongs to
	Workspace string `json:"workspace"`
}

// IamUserOTP defines model for iamUserOTP.
type IamUserOTP struct {
	// Secret OTP secret
	Secret string `json:"secret"`

	// VerificationCode Verification code to confirm OTP setup
	VerificationCode string `json:"verification_code"`
}

// IamUserPublicKey defines model for iamUserPublicKey.
type IamUserPublicKey struct {
	// CreatedAt Timestamp when the public key was created
	CreatedAt time.Time `json:"created_at"`

	// Key The public key content in SSH format
	Key       string `json:"key"`
	PublicKey string `json:"public_key"`

	// Title Title or name for the public key
	Title string `json:"title"`
	Type  string `json:"type"`

	// UpdatedAt Timestamp when the public key was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// User The user uuid this public key belongs to
	User string `json:"user"`

	// Uuid Unique identifier for the public key
	Uuid string `json:"uuid"`
}

// IamUserRoleBindingDetailed defines model for iamUserRoleBindingDetailed.
type IamUserRoleBindingDetailed struct {
	// CreatedAt Timestamp when the binding was created
	CreatedAt time.Time `json:"created_at"`

	// Items Optional items associated with this role binding
	Items *[]map[string]string `json:"items,omitempty"`
	Role  IamRole              `json:"role"`

	// UpdatedAt Timestamp when the binding was last updated
	UpdatedAt time.Time `json:"updated_at"`
	User      IamUser   `json:"user"`

	// Uuid Unique identifier for the user-role binding
	Uuid string `json:"uuid"`

	// Workspace The workspace in which the binding exists
	Workspace string `json:"workspace"`
}

// IamUserRoleBindingMinimal defines model for iamUserRoleBindingMinimal.
type IamUserRoleBindingMinimal struct {
	Items     []map[string]string `json:"items"`
	Role      string              `json:"role"`
	User      string              `json:"user"`
	Workspace string              `json:"workspace"`
}

// IamUserToken defines model for iamUserToken.
type IamUserToken struct {
	Active    bool   `json:"active"`
	CreatedAt string `json:"created_at"`

	// ExpiresAt Token expiration timestamp
	ExpiresAt time.Time `json:"expires_at"`
	IsHashed  bool      `json:"is_hashed"`
	Name      string    `json:"name"`
	Secret    string    `json:"secret"`

	// Token Authentication token
	Token     *string `json:"token,omitempty"`
	UpdatedAt string  `json:"updated_at"`

	// User UUID of the authenticated user
	User string `json:"user"`
	Uuid string `json:"uuid"`
}

// IamUserTokenWithCredCreate defines model for iamUserTokenWithCredCreate.
type IamUserTokenWithCredCreate struct {
	// Active is token active
	Active bool `json:"active"`

	// CreatedAt Timestamp when the user was created
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt Timestamp when the user was deleted
	DeletedAt time.Time `json:"deleted_at"`

	// Secret user uuid
	Secret string `json:"secret"`

	// UpdatedAt Timestamp when the user was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// User user uuid
	User string `json:"user"`

	// Uuid uuid of token
	Uuid string `json:"uuid"`
}

// IamUserWithRoleItems defines model for iamUserWithRoleItems.
type IamUserWithRoleItems struct {
	CreatedAt   time.Time           `json:"created_at"`
	Email       string              `json:"email"`
	IsSuspended bool                `json:"is_suspended"`
	Items       []map[string]string `json:"items"`
	Name        string              `json:"name"`
	UpdatedAt   time.Time           `json:"updated_at"`

	// Uuid The userUUID
	Uuid string `json:"uuid"`
}

// IamUserWorkspace defines model for iamUserWorkspace.
type IamUserWorkspace struct {
	CreatedAt    time.Time       `json:"created_at"`
	IsMaster     bool            `json:"is_master"`
	IsSuspended  bool            `json:"is_suspended"`
	Name         string          `json:"name"`
	Namespace    string          `json:"namespace"`
	Organization IamOrganization `json:"organization"`
	UpdatedAt    time.Time       `json:"updated_at"`
	Uuid         string          `json:"uuid"`
}

// IamUserWorkspaceDetailedUser defines model for iamUserWorkspaceDetailedUser.
type IamUserWorkspaceDetailedUser struct {
	Birthday      *string `json:"birthday,omitempty"`
	CreatedAt     *string `json:"created_at,omitempty"`
	Email         *string `json:"email,omitempty"`
	EmailVerified *bool   `json:"email_verified,omitempty"`
	FirstName     *string `json:"first_name,omitempty"`

	// Groups Groups this user belongs to in the workspace
	Groups              []IamGroupWithMinimalRole `json:"groups"`
	IsOtpEnabled        *bool                     `json:"is_otp_enabled,omitempty"`
	IsSuspended         *bool                     `json:"is_suspended,omitempty"`
	LastName            *string                   `json:"last_name,omitempty"`
	Name                *string                   `json:"name,omitempty"`
	PhoneNumber         *string                   `json:"phone_number,omitempty"`
	PhoneNumberVerified *bool                     `json:"phone_number_verified,omitempty"`

	// Roles Roles assigned to this user in the workspace
	Roles     []IamRoleMinimal `json:"roles"`
	UpdatedAt *string          `json:"updated_at,omitempty"`
	UserType  *string          `json:"user_type,omitempty"`
	Uuid      *string          `json:"uuid,omitempty"`
}

// IamWorkspace defines model for iamWorkspace.
type IamWorkspace struct {
	// CreatedAt Timestamp when the workspace was created
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the workspace
	Description *string `json:"description,omitempty"`
	IsSuspended bool    `json:"is_suspended"`

	// Name Name of the workspace
	Name         string `json:"name"`
	Namespace    string `json:"namespace"`
	Organization string `json:"organization"`

	// UpdatedAt Timestamp when the workspace was last updated
	UpdatedAt time.Time `json:"updated_at"`

	// Uuid Unique identifier for the workspace
	Uuid string `json:"uuid"`
}

// IamWorkspaceMinimal defines model for iamWorkspaceMinimal.
type IamWorkspaceMinimal struct {
	IsSuspended  bool   `json:"is_suspended"`
	Name         string `json:"name"`
	Namespace    string `json:"namespace"`
	Organization string `json:"organization"`
}

// ListDetailedWorkspaceUsersParams defines parameters for ListDetailedWorkspaceUsers.
type ListDetailedWorkspaceUsersParams struct {
	// Email Filter users by email address
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// BulkCanUserJSONBody defines parameters for BulkCanUser.
type BulkCanUserJSONBody = []IamUserBulkCanRequestItem

// ListUserWorkspacesParams defines parameters for ListUserWorkspaces.
type ListUserWorkspacesParams struct {
	// OrgName Organization English Name
	OrgName *string `form:"org_name,omitempty" json:"org_name,omitempty"`

	// Name Workspace Name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// WorkspaceUuid worksapce uuid
	WorkspaceUuid *string `form:"workspace_uuid,omitempty" json:"workspace_uuid,omitempty"`

	// IncludeMaster Include master workspaces, default is False
	IncludeMaster *string `form:"include_master,omitempty" json:"include_master,omitempty"`

	// IncludeSuspended Include suspended workspaces, default is False
	IncludeSuspended *string `form:"include_suspended,omitempty" json:"include_suspended,omitempty"`
}

// ListRolesParams defines parameters for ListRoles.
type ListRolesParams struct {
	// Service Filter roles based on given service name. If not provided, returns roles for all services.
	Service *string `form:"service,omitempty" json:"service,omitempty"`
}

// BulkRefreshThirdPartyTokensJSONBody defines parameters for BulkRefreshThirdPartyTokens.
type BulkRefreshThirdPartyTokensJSONBody = []IamRefreshTokenReq

// ListWorkspaceUsersParams defines parameters for ListWorkspaceUsers.
type ListWorkspaceUsersParams struct {
	// Email Filter users by email address
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// AcceptInvitationJSONRequestBody defines body for AcceptInvitation for application/json ContentType.
type AcceptInvitationJSONRequestBody = IamUserAcceptInvitation

// CreateAuthTokenWithCredJSONRequestBody defines body for CreateAuthTokenWithCred for application/json ContentType.
type CreateAuthTokenWithCredJSONRequestBody = IamLoginRequest

// CreateAuthTokenWithChallengeJSONRequestBody defines body for CreateAuthTokenWithChallenge for application/json ContentType.
type CreateAuthTokenWithChallengeJSONRequestBody = IamChallengeRequest

// GetThirdPartyAccessTokenJSONRequestBody defines body for GetThirdPartyAccessToken for application/json ContentType.
type GetThirdPartyAccessTokenJSONRequestBody = IamThirdPartyTokenRequest

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = IamChangePasswordRequest

// ResetPasswordJSONRequestBody defines body for ResetPassword for application/json ContentType.
type ResetPasswordJSONRequestBody = IamPasswordResetRequest

// BulkCanUserJSONRequestBody defines body for BulkCanUser for application/json ContentType.
type BulkCanUserJSONRequestBody = BulkCanUserJSONBody

// EnableUserOtpJSONRequestBody defines body for EnableUserOtp for application/json ContentType.
type EnableUserOtpJSONRequestBody = IamUserOTP

// CreateUserPublicKeyJSONRequestBody defines body for CreateUserPublicKey for application/json ContentType.
type CreateUserPublicKeyJSONRequestBody = IamRequestCreateUserPublicKey

// CreateUserTokenJSONRequestBody defines body for CreateUserToken for application/json ContentType.
type CreateUserTokenJSONRequestBody = IamReuqestUserTokenCreate

// CreateBackupKeyJSONRequestBody defines body for CreateBackupKey for application/json ContentType.
type CreateBackupKeyJSONRequestBody = IamRequestCreateBackupKey

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = IamRequestCreateGroup

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = IamRequestCreateGroup

// BulkAddRolesToGroupJSONRequestBody defines body for BulkAddRolesToGroup for application/json ContentType.
type BulkAddRolesToGroupJSONRequestBody = IamBulkAddRolesRequest

// BulkAddServiceUsersToGroupJSONRequestBody defines body for BulkAddServiceUsersToGroup for application/json ContentType.
type BulkAddServiceUsersToGroupJSONRequestBody = IamBulkAddServiceUsersRequest

// BulkAddUsersToGroupJSONRequestBody defines body for BulkAddUsersToGroup for application/json ContentType.
type BulkAddUsersToGroupJSONRequestBody = IamBulkAddUsersRequest

// AddServiceUserToGroupJSONRequestBody defines body for AddServiceUserToGroup for application/json ContentType.
type AddServiceUserToGroupJSONRequestBody = IamServiceUser

// AddUserToGroupJSONRequestBody defines body for AddUserToGroup for application/json ContentType.
type AddUserToGroupJSONRequestBody = IamCreateUser

// InviteUsersToWorkspaceJSONRequestBody defines body for InviteUsersToWorkspace for application/json ContentType.
type InviteUsersToWorkspaceJSONRequestBody = IamInviteRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = IamCreateRole

// BulkAddRulesToRoleJSONRequestBody defines body for BulkAddRulesToRole for application/json ContentType.
type BulkAddRulesToRoleJSONRequestBody = IamBulkAddRulesRequest

// BulkAddServiceUsersToRoleJSONRequestBody defines body for BulkAddServiceUsersToRole for application/json ContentType.
type BulkAddServiceUsersToRoleJSONRequestBody = IamBulkAddServiceUsersToRoleRequest

// BulkAddUsersToRoleJSONRequestBody defines body for BulkAddUsersToRole for application/json ContentType.
type BulkAddUsersToRoleJSONRequestBody = IamBulkAddUsersToRoleRequest

// AddRuleToRoleJSONRequestBody defines body for AddRuleToRole for application/json ContentType.
type AddRuleToRoleJSONRequestBody = IamRequestRuleCreate

// AssignRoleToServiceUserJSONRequestBody defines body for AssignRoleToServiceUser for application/json ContentType.
type AssignRoleToServiceUserJSONRequestBody = IamRoleBindingItems

// AssignRoleToUserJSONRequestBody defines body for AssignRoleToUser for application/json ContentType.
type AssignRoleToUserJSONRequestBody = IamRoleBindingItems

// CreateRuleJSONRequestBody defines body for CreateRule for application/json ContentType.
type CreateRuleJSONRequestBody = IamRequestRuleCreate

// UpdateRuleJSONRequestBody defines body for UpdateRule for application/json ContentType.
type UpdateRuleJSONRequestBody = IamRequestRuleCreate

// CreateServiceUserJSONRequestBody defines body for CreateServiceUser for application/json ContentType.
type CreateServiceUserJSONRequestBody = IamServiceUserCreate

// UpdateServiceUserJSONRequestBody defines body for UpdateServiceUser for application/json ContentType.
type UpdateServiceUserJSONRequestBody = IamServiceUser

// CreateServiceUserKiseKeyJSONRequestBody defines body for CreateServiceUserKiseKey for application/json ContentType.
type CreateServiceUserKiseKeyJSONRequestBody = IamServiceUserKiseKey

// CreateServiceUserPublicKeyJSONRequestBody defines body for CreateServiceUserPublicKey for application/json ContentType.
type CreateServiceUserPublicKeyJSONRequestBody = IamServiceUserPublicKeyCreate

// CreateServiceUserTokenJSONRequestBody defines body for CreateServiceUserToken for application/json ContentType.
type CreateServiceUserTokenJSONRequestBody = IamServiceUserTokenWithSecret

// BulkRefreshThirdPartyTokensJSONRequestBody defines body for BulkRefreshThirdPartyTokens for application/json ContentType.
type BulkRefreshThirdPartyTokensJSONRequestBody = BulkRefreshThirdPartyTokensJSONBody

// AllowUserJSONRequestBody defines body for AllowUser for application/json ContentType.
type AllowUserJSONRequestBody = IamCreateUser

// CreateUserKiseKeyJSONRequestBody defines body for CreateUserKiseKey for application/json ContentType.
type CreateUserKiseKeyJSONRequestBody = IamCreateUserKiseKey

// SuspendUserJSONRequestBody defines body for SuspendUser for application/json ContentType.
type SuspendUserJSONRequestBody = IamCreateUser

// GetOpenIdTokenJSONRequestBody defines body for GetOpenIdToken for application/json ContentType.
type GetOpenIdTokenJSONRequestBody = IamOpenIdTokenRequest
