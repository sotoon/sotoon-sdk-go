// Package iam provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package iam

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AcceptInvitationWithBody request with any body
	AcceptInvitationWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptInvitation(ctx context.Context, token string, body AcceptInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTokenWithCredWithBody request with any body
	CreateTokenWithCredWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTokenWithCred(ctx context.Context, body CreateTokenWithCredJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTokenWithChallengeWithBody request with any body
	CreateTokenWithChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTokenWithChallenge(ctx context.Context, body CreateTokenWithChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDetailedGroup request
	ListDetailedGroup(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetailedGroup request
	GetDetailedGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDetailedServiceUsers request
	ListDetailedServiceUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetailedServiceUser request
	GetDetailedServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDetailedUsers request
	ListDetailedUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDetailedUser request
	GetDetailedUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Healthz request
	Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThirdPartyAccessTokenWithBody request with any body
	CreateThirdPartyAccessTokenWithBody(ctx context.Context, organizationUUID string, thirdPartyUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateThirdPartyAccessToken(ctx context.Context, organizationUUID string, thirdPartyUUID string, body CreateThirdPartyAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePasswordWithBody request with any body
	ChangePasswordWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePassword(ctx context.Context, token string, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetPasswordWithBody request with any body
	ResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetPassword(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserBulkCanWithBody request with any body
	UserBulkCanWithBody(ctx context.Context, userUUID string, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserBulkCan(ctx context.Context, userUUID string, workspaceUUID string, body UserBulkCanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableUserOTP request
	DisableUserOTP(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOTP request
	GetUserOTP(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableUserOTPWithBody request with any body
	EnableUserOTPWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableUserOTP(ctx context.Context, userUUID string, body EnableUserOTPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserPublicKeys request
	ListUserPublicKeys(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserPublicKeyWithBody request with any body
	CreateUserPublicKeyWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserPublicKey(ctx context.Context, userUUID string, body CreateUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserPublicKey request
	DeleteUserPublicKey(ctx context.Context, userUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserTokens request
	ListUserTokens(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserTokenWithBody request with any body
	CreateUserTokenWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserToken(ctx context.Context, userUUID string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserToken request
	DeleteUserToken(ctx context.Context, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserWorkspaces request
	ListUserWorkspaces(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBackupKeys request
	ListBackupKeys(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBackupKeyWithBody request with any body
	CreateBackupKeyWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBackupKey(ctx context.Context, workspaceUUID string, body CreateBackupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackupKey request
	DeleteBackupKey(ctx context.Context, workspaceUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroup request
	ListGroup(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupWithBody request with any body
	CreateGroupWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGroup(ctx context.Context, workspaceUUID string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroup request
	DeleteGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupWithBody request with any body
	UpdateGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroup(ctx context.Context, workspaceUUID string, groupUUID string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddRolesToGroupWithBody request with any body
	BulkAddRolesToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddRolesToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddRolesToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddServiceUsersToGroupWithBody request with any body
	BulkAddServiceUsersToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddServiceUsersToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddServiceUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddUsersToGroupWithBody request with any body
	BulkAddUsersToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddUsersToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupRoles request
	ListGroupRoles(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupServiceUsers request
	ListGroupServiceUsers(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveServiceUserFromGroup request
	RemoveServiceUserFromGroup(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddServiceUserToGroup request
	AddServiceUserToGroup(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroupUsers request
	ListGroupUsers(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromGroup request
	RemoveUserFromGroup(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserToGroup request
	AddUserToGroup(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteUserWithBody request with any body
	InviteUserWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteUser(ctx context.Context, workspaceUUID string, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceUserKiseKeys request
	ListServiceUserKiseKeys(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, workspaceUUID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRole request
	GetRole(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddRulesToRoleWithBody request with any body
	BulkAddRulesToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddRulesToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddRulesToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddServiceUsersToRoleWithBody request with any body
	BulkAddServiceUsersToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddServiceUsersToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddServiceUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkAddUsersToRoleWithBody request with any body
	BulkAddUsersToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkAddUsersToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRoleFromGroup request
	RemoveRoleFromGroup(ctx context.Context, workspaceUUID string, roleUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleRules request
	ListRoleRules(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRuleFromRole request
	RemoveRuleFromRole(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRuleToRole request
	AddRuleToRole(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleServiceUsers request
	ListRoleServiceUsers(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveServiceUserFromRole request
	RemoveServiceUserFromRole(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddServiceUserToRoleWithBody request with any body
	AddServiceUserToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddServiceUserToRole(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, body AddServiceUserToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoleUsers request
	ListRoleUsers(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromRole request
	RemoveUserFromRole(ctx context.Context, workspaceUUID string, roleUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRules request
	ListRules(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRuleWithBody request with any body
	CreateRuleWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRule(ctx context.Context, workspaceUUID string, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRule request
	DeleteRule(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRule request
	GetRule(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRuleWithBody request with any body
	UpdateRuleWithBody(ctx context.Context, workspaceUUID string, ruleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRule(ctx context.Context, workspaceUUID string, ruleUUID string, body UpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRuleRoles request
	ListRuleRoles(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceUsers request
	ListServiceUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceUserWithBody request with any body
	CreateServiceUserWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceUser(ctx context.Context, workspaceUUID string, body CreateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceUser request
	DeleteServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceUserWithBody request with any body
	UpdateServiceUserWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, body UpdateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceUserKiseKeyWithBody request with any body
	CreateServiceUserKiseKeyWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceUserKiseKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceUserKiseKey request
	DeleteServiceUserKiseKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceUserPublicKeys request
	ListServiceUserPublicKeys(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceUserPublicKeyWithBody request with any body
	CreateServiceUserPublicKeyWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceUserPublicKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceUserPublicKey request
	DeleteServiceUserPublicKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServiceUserTokens request
	ListServiceUserTokens(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceUserTokenWithBody request with any body
	CreateServiceUserTokenWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceUserToken(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceUserToken request
	DeleteServiceUserToken(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkRefreshThirdPartyTokensWithBody request with any body
	BulkRefreshThirdPartyTokensWithBody(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkRefreshThirdPartyTokens(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, body BulkRefreshThirdPartyTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromWorkspace request
	RemoveUserFromWorkspace(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AllowUser request
	AllowUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserKiseKeys request
	ListUserKiseKeys(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserKiseKeyWithBody request with any body
	CreateUserKiseKeyWithBody(ctx context.Context, workspaceUUID string, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserKiseKey(ctx context.Context, workspaceUUID string, userUUID string, body CreateUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserKiseKey request
	DeleteUserKiseKey(ctx context.Context, workspaceUUID string, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SuspendUser request
	SuspendUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOpenIDTokenWithBody request with any body
	CreateOpenIDTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOpenIDToken(ctx context.Context, body CreateOpenIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AcceptInvitationWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInvitationRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptInvitation(ctx context.Context, token string, body AcceptInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptInvitationRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithCredWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenWithCredRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithCred(ctx context.Context, body CreateTokenWithCredJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenWithCredRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithChallengeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenWithChallengeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithChallenge(ctx context.Context, body CreateTokenWithChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenWithChallengeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDetailedGroup(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDetailedGroupRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetailedGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetailedGroupRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDetailedServiceUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDetailedServiceUsersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetailedServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetailedServiceUserRequest(c.Server, workspaceUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDetailedUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDetailedUsersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDetailedUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDetailedUserRequest(c.Server, workspaceUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Healthz(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthzRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThirdPartyAccessTokenWithBody(ctx context.Context, organizationUUID string, thirdPartyUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThirdPartyAccessTokenRequestWithBody(c.Server, organizationUUID, thirdPartyUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThirdPartyAccessToken(ctx context.Context, organizationUUID string, thirdPartyUUID string, body CreateThirdPartyAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThirdPartyAccessTokenRequest(c.Server, organizationUUID, thirdPartyUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePasswordWithBody(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequestWithBody(c.Server, token, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePassword(ctx context.Context, token string, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePasswordRequest(c.Server, token, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPassword(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserBulkCanWithBody(ctx context.Context, userUUID string, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserBulkCanRequestWithBody(c.Server, userUUID, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserBulkCan(ctx context.Context, userUUID string, workspaceUUID string, body UserBulkCanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserBulkCanRequest(c.Server, userUUID, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableUserOTP(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableUserOTPRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOTP(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOTPRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableUserOTPWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableUserOTPRequestWithBody(c.Server, userUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableUserOTP(ctx context.Context, userUUID string, body EnableUserOTPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableUserOTPRequest(c.Server, userUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserPublicKeys(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserPublicKeysRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPublicKeyWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPublicKeyRequestWithBody(c.Server, userUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserPublicKey(ctx context.Context, userUUID string, body CreateUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserPublicKeyRequest(c.Server, userUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserPublicKey(ctx context.Context, userUUID string, resourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserPublicKeyRequest(c.Server, userUUID, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserTokens(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserTokensRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserTokenWithBody(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserTokenRequestWithBody(c.Server, userUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserToken(ctx context.Context, userUUID string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserTokenRequest(c.Server, userUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserToken(ctx context.Context, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserTokenRequest(c.Server, userUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserWorkspaces(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserWorkspacesRequest(c.Server, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBackupKeys(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBackupKeysRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackupKeyWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackupKeyRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBackupKey(ctx context.Context, workspaceUUID string, body CreateBackupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBackupKeyRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackupKey(ctx context.Context, workspaceUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackupKeyRequest(c.Server, workspaceUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroup(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroup(ctx context.Context, workspaceUUID string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRequestWithBody(c.Server, workspaceUUID, groupUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroup(ctx context.Context, workspaceUUID string, groupUUID string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRequest(c.Server, workspaceUUID, groupUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddRolesToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddRolesToGroupRequestWithBody(c.Server, workspaceUUID, groupUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddRolesToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddRolesToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddRolesToGroupRequest(c.Server, workspaceUUID, groupUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddServiceUsersToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddServiceUsersToGroupRequestWithBody(c.Server, workspaceUUID, groupUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddServiceUsersToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddServiceUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddServiceUsersToGroupRequest(c.Server, workspaceUUID, groupUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddUsersToGroupWithBody(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddUsersToGroupRequestWithBody(c.Server, workspaceUUID, groupUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddUsersToGroup(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddUsersToGroupRequest(c.Server, workspaceUUID, groupUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupRoles(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupRolesRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupServiceUsers(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupServiceUsersRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveServiceUserFromGroup(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveServiceUserFromGroupRequest(c.Server, workspaceUUID, groupUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddServiceUserToGroup(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddServiceUserToGroupRequest(c.Server, workspaceUUID, groupUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroupUsers(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupUsersRequest(c.Server, workspaceUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromGroup(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromGroupRequest(c.Server, workspaceUUID, groupUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserToGroup(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserToGroupRequest(c.Server, workspaceUUID, groupUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUser(ctx context.Context, workspaceUUID string, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceUserKiseKeys(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceUserKiseKeysRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, workspaceUUID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, workspaceUUID, roleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRole(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRoleRequest(c.Server, workspaceUUID, roleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddRulesToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddRulesToRoleRequestWithBody(c.Server, workspaceUUID, roleUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddRulesToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddRulesToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddRulesToRoleRequest(c.Server, workspaceUUID, roleUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddServiceUsersToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddServiceUsersToRoleRequestWithBody(c.Server, workspaceUUID, roleUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddServiceUsersToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddServiceUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddServiceUsersToRoleRequest(c.Server, workspaceUUID, roleUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddUsersToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddUsersToRoleRequestWithBody(c.Server, workspaceUUID, roleUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkAddUsersToRole(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkAddUsersToRoleRequest(c.Server, workspaceUUID, roleUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRoleFromGroup(ctx context.Context, workspaceUUID string, roleUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRoleFromGroupRequest(c.Server, workspaceUUID, roleUUID, groupUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleRules(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleRulesRequest(c.Server, workspaceUUID, roleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRuleFromRole(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRuleFromRoleRequest(c.Server, workspaceUUID, roleUUID, ruleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRuleToRole(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRuleToRoleRequest(c.Server, workspaceUUID, roleUUID, ruleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleServiceUsers(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleServiceUsersRequest(c.Server, workspaceUUID, roleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveServiceUserFromRole(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveServiceUserFromRoleRequest(c.Server, workspaceUUID, roleUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddServiceUserToRoleWithBody(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddServiceUserToRoleRequestWithBody(c.Server, workspaceUUID, roleUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddServiceUserToRole(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, body AddServiceUserToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddServiceUserToRoleRequest(c.Server, workspaceUUID, roleUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoleUsers(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRoleUsersRequest(c.Server, workspaceUUID, roleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromRole(ctx context.Context, workspaceUUID string, roleUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromRoleRequest(c.Server, workspaceUUID, roleUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRules(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRulesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRuleWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRuleRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRule(ctx context.Context, workspaceUUID string, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRuleRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRule(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRuleRequest(c.Server, workspaceUUID, ruleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRule(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuleRequest(c.Server, workspaceUUID, ruleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRuleWithBody(ctx context.Context, workspaceUUID string, ruleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRuleRequestWithBody(c.Server, workspaceUUID, ruleUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRule(ctx context.Context, workspaceUUID string, ruleUUID string, body UpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRuleRequest(c.Server, workspaceUUID, ruleUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRuleRoles(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRuleRolesRequest(c.Server, workspaceUUID, ruleUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceUsersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserWithBody(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserRequestWithBody(c.Server, workspaceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUser(ctx context.Context, workspaceUUID string, body CreateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserRequest(c.Server, workspaceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceUserRequest(c.Server, workspaceUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceUserWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceUserRequestWithBody(c.Server, workspaceUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceUser(ctx context.Context, workspaceUUID string, serviceUserUUID string, body UpdateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceUserRequest(c.Server, workspaceUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserKiseKeyWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserKiseKeyRequestWithBody(c.Server, workspaceUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserKiseKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserKiseKeyRequest(c.Server, workspaceUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceUserKiseKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceUserKiseKeyRequest(c.Server, workspaceUUID, serviceUserUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceUserPublicKeys(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceUserPublicKeysRequest(c.Server, workspaceUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserPublicKeyWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserPublicKeyRequestWithBody(c.Server, workspaceUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserPublicKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserPublicKeyRequest(c.Server, workspaceUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceUserPublicKey(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceUserPublicKeyRequest(c.Server, workspaceUUID, serviceUserUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServiceUserTokens(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServiceUserTokensRequest(c.Server, workspaceUUID, serviceUserUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserTokenWithBody(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserTokenRequestWithBody(c.Server, workspaceUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceUserToken(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceUserTokenRequest(c.Server, workspaceUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceUserToken(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceUserTokenRequest(c.Server, workspaceUUID, serviceUserUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkRefreshThirdPartyTokensWithBody(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkRefreshThirdPartyTokensRequestWithBody(c.Server, workspaceUUID, thirdPartyUUID, serviceUserUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkRefreshThirdPartyTokens(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, body BulkRefreshThirdPartyTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkRefreshThirdPartyTokensRequest(c.Server, workspaceUUID, thirdPartyUUID, serviceUserUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, workspaceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromWorkspace(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromWorkspaceRequest(c.Server, workspaceUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AllowUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAllowUserRequest(c.Server, workspaceUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserKiseKeys(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserKiseKeysRequest(c.Server, workspaceUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserKiseKeyWithBody(ctx context.Context, workspaceUUID string, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserKiseKeyRequestWithBody(c.Server, workspaceUUID, userUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserKiseKey(ctx context.Context, workspaceUUID string, userUUID string, body CreateUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserKiseKeyRequest(c.Server, workspaceUUID, userUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserKiseKey(ctx context.Context, workspaceUUID string, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserKiseKeyRequest(c.Server, workspaceUUID, userUUID, resourceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SuspendUser(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSuspendUserRequest(c.Server, workspaceUUID, userUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOpenIDTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpenIDTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOpenIDToken(ctx context.Context, body CreateOpenIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpenIDTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAcceptInvitationRequest calls the generic AcceptInvitation builder with application/json body
func NewAcceptInvitationRequest(server string, token string, body AcceptInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptInvitationRequestWithBody(server, token, "application/json", bodyReader)
}

// NewAcceptInvitationRequestWithBody generates requests for AcceptInvitation with any type of body
func NewAcceptInvitationRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/accept-invitation/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTokenWithCredRequest calls the generic CreateTokenWithCred builder with application/json body
func NewCreateTokenWithCredRequest(server string, body CreateTokenWithCredJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenWithCredRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenWithCredRequestWithBody generates requests for CreateTokenWithCred with any type of body
func NewCreateTokenWithCredRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/authn/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTokenWithChallengeRequest calls the generic CreateTokenWithChallenge builder with application/json body
func NewCreateTokenWithChallengeRequest(server string, body CreateTokenWithChallengeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenWithChallengeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenWithChallengeRequestWithBody generates requests for CreateTokenWithChallenge with any type of body
func NewCreateTokenWithChallengeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/authn/challenge/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDetailedGroupRequest generates requests for ListDetailedGroup
func NewListDetailedGroupRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/group/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDetailedGroupRequest generates requests for GetDetailedGroup
func NewGetDetailedGroupRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDetailedServiceUsersRequest generates requests for ListDetailedServiceUsers
func NewListDetailedServiceUsersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/service-user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDetailedServiceUserRequest generates requests for GetDetailedServiceUser
func NewGetDetailedServiceUserRequest(server string, workspaceUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/service-user/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDetailedUsersRequest generates requests for ListDetailedUsers
func NewListDetailedUsersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDetailedUserRequest generates requests for GetDetailedUser
func NewGetDetailedUserRequest(server string, workspaceUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/detailed/workspace/%s/user/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHealthzRequest generates requests for Healthz
func NewHealthzRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/healthz/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateThirdPartyAccessTokenRequest calls the generic CreateThirdPartyAccessToken builder with application/json body
func NewCreateThirdPartyAccessTokenRequest(server string, organizationUUID string, thirdPartyUUID string, body CreateThirdPartyAccessTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThirdPartyAccessTokenRequestWithBody(server, organizationUUID, thirdPartyUUID, "application/json", bodyReader)
}

// NewCreateThirdPartyAccessTokenRequestWithBody generates requests for CreateThirdPartyAccessToken with any type of body
func NewCreateThirdPartyAccessTokenRequestWithBody(server string, organizationUUID string, thirdPartyUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationUUID", runtime.ParamLocationPath, organizationUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "thirdPartyUUID", runtime.ParamLocationPath, thirdPartyUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/organizations/%s/third-parties/%s/access-tokens", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewChangePasswordRequest calls the generic ChangePassword builder with application/json body
func NewChangePasswordRequest(server string, token string, body ChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePasswordRequestWithBody(server, token, "application/json", bodyReader)
}

// NewChangePasswordRequestWithBody generates requests for ChangePassword with any type of body
func NewChangePasswordRequestWithBody(server string, token string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationPath, token)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/change-password/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetPasswordRequest calls the generic ResetPassword builder with application/json body
func NewResetPasswordRequest(server string, body ResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewResetPasswordRequestWithBody generates requests for ResetPassword with any type of body
func NewResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserBulkCanRequest calls the generic UserBulkCan builder with application/json body
func NewUserBulkCanRequest(server string, userUUID string, workspaceUUID string, body UserBulkCanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserBulkCanRequestWithBody(server, userUUID, workspaceUUID, "application/json", bodyReader)
}

// NewUserBulkCanRequestWithBody generates requests for UserBulkCan with any type of body
func NewUserBulkCanRequestWithBody(server string, userUUID string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/bulk-can/workspace/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisableUserOTPRequest generates requests for DisableUserOTP
func NewDisableUserOTPRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/otp/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOTPRequest generates requests for GetUserOTP
func NewGetUserOTPRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/otp/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableUserOTPRequest calls the generic EnableUserOTP builder with application/json body
func NewEnableUserOTPRequest(server string, userUUID string, body EnableUserOTPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableUserOTPRequestWithBody(server, userUUID, "application/json", bodyReader)
}

// NewEnableUserOTPRequestWithBody generates requests for EnableUserOTP with any type of body
func NewEnableUserOTPRequestWithBody(server string, userUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/otp/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUserPublicKeysRequest generates requests for ListUserPublicKeys
func NewListUserPublicKeysRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/public-key/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserPublicKeyRequest calls the generic CreateUserPublicKey builder with application/json body
func NewCreateUserPublicKeyRequest(server string, userUUID string, body CreateUserPublicKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserPublicKeyRequestWithBody(server, userUUID, "application/json", bodyReader)
}

// NewCreateUserPublicKeyRequestWithBody generates requests for CreateUserPublicKey with any type of body
func NewCreateUserPublicKeyRequestWithBody(server string, userUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/public-key/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserPublicKeyRequest generates requests for DeleteUserPublicKey
func NewDeleteUserPublicKeyRequest(server string, userUUID string, resourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/public-key/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserTokensRequest generates requests for ListUserTokens
func NewListUserTokensRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/user-token/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserTokenRequest calls the generic CreateUserToken builder with application/json body
func NewCreateUserTokenRequest(server string, userUUID string, body CreateUserTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserTokenRequestWithBody(server, userUUID, "application/json", bodyReader)
}

// NewCreateUserTokenRequestWithBody generates requests for CreateUserToken with any type of body
func NewCreateUserTokenRequestWithBody(server string, userUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/user-token/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserTokenRequest generates requests for DeleteUserToken
func NewDeleteUserTokenRequest(server string, userUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/user-token/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserWorkspacesRequest generates requests for ListUserWorkspaces
func NewListUserWorkspacesRequest(server string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/user/%s/workspace/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBackupKeysRequest generates requests for ListBackupKeys
func NewListBackupKeysRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/backup-key/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBackupKeyRequest calls the generic CreateBackupKey builder with application/json body
func NewCreateBackupKeyRequest(server string, workspaceUUID string, body CreateBackupKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBackupKeyRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewCreateBackupKeyRequestWithBody generates requests for CreateBackupKey with any type of body
func NewCreateBackupKeyRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/backup-key/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBackupKeyRequest generates requests for DeleteBackupKey
func NewDeleteBackupKeyRequest(server string, workspaceUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/backup-key/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupRequest generates requests for ListGroup
func NewListGroupRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGroupRequest calls the generic CreateGroup builder with application/json body
func NewCreateGroupRequest(server string, workspaceUUID string, body CreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGroupRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewCreateGroupRequestWithBody generates requests for CreateGroup with any type of body
func NewCreateGroupRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupRequest generates requests for DeleteGroup
func NewDeleteGroupRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupRequest calls the generic UpdateGroup builder with application/json body
func NewUpdateGroupRequest(server string, workspaceUUID string, groupUUID string, body UpdateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupRequestWithBody(server, workspaceUUID, groupUUID, "application/json", bodyReader)
}

// NewUpdateGroupRequestWithBody generates requests for UpdateGroup with any type of body
func NewUpdateGroupRequestWithBody(server string, workspaceUUID string, groupUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkAddRolesToGroupRequest calls the generic BulkAddRolesToGroup builder with application/json body
func NewBulkAddRolesToGroupRequest(server string, workspaceUUID string, groupUUID string, body BulkAddRolesToGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddRolesToGroupRequestWithBody(server, workspaceUUID, groupUUID, "application/json", bodyReader)
}

// NewBulkAddRolesToGroupRequestWithBody generates requests for BulkAddRolesToGroup with any type of body
func NewBulkAddRolesToGroupRequestWithBody(server string, workspaceUUID string, groupUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/bulk-add-roles/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkAddServiceUsersToGroupRequest calls the generic BulkAddServiceUsersToGroup builder with application/json body
func NewBulkAddServiceUsersToGroupRequest(server string, workspaceUUID string, groupUUID string, body BulkAddServiceUsersToGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddServiceUsersToGroupRequestWithBody(server, workspaceUUID, groupUUID, "application/json", bodyReader)
}

// NewBulkAddServiceUsersToGroupRequestWithBody generates requests for BulkAddServiceUsersToGroup with any type of body
func NewBulkAddServiceUsersToGroupRequestWithBody(server string, workspaceUUID string, groupUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/bulk-add-service-users/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkAddUsersToGroupRequest calls the generic BulkAddUsersToGroup builder with application/json body
func NewBulkAddUsersToGroupRequest(server string, workspaceUUID string, groupUUID string, body BulkAddUsersToGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddUsersToGroupRequestWithBody(server, workspaceUUID, groupUUID, "application/json", bodyReader)
}

// NewBulkAddUsersToGroupRequestWithBody generates requests for BulkAddUsersToGroup with any type of body
func NewBulkAddUsersToGroupRequestWithBody(server string, workspaceUUID string, groupUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/bulk-add-users/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListGroupRolesRequest generates requests for ListGroupRoles
func NewListGroupRolesRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupServiceUsersRequest generates requests for ListGroupServiceUsers
func NewListGroupServiceUsersRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/service-user/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveServiceUserFromGroupRequest generates requests for RemoveServiceUserFromGroup
func NewRemoveServiceUserFromGroupRequest(server string, workspaceUUID string, groupUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/service-user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddServiceUserToGroupRequest generates requests for AddServiceUserToGroup
func NewAddServiceUserToGroupRequest(server string, workspaceUUID string, groupUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/service-user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGroupUsersRequest generates requests for ListGroupUsers
func NewListGroupUsersRequest(server string, workspaceUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/user/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromGroupRequest generates requests for RemoveUserFromGroup
func NewRemoveUserFromGroupRequest(server string, workspaceUUID string, groupUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserToGroupRequest generates requests for AddUserToGroup
func NewAddUserToGroupRequest(server string, workspaceUUID string, groupUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/group/%s/user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteUserRequest calls the generic InviteUser builder with application/json body
func NewInviteUserRequest(server string, workspaceUUID string, body InviteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteUserRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewInviteUserRequestWithBody generates requests for InviteUser with any type of body
func NewInviteUserRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/invite/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListServiceUserKiseKeysRequest generates requests for ListServiceUserKiseKeys
func NewListServiceUserKiseKeysRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/kise/key/service-user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, workspaceUUID string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, workspaceUUID string, roleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRoleRequest generates requests for GetRole
func NewGetRoleRequest(server string, workspaceUUID string, roleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkAddRulesToRoleRequest calls the generic BulkAddRulesToRole builder with application/json body
func NewBulkAddRulesToRoleRequest(server string, workspaceUUID string, roleUUID string, body BulkAddRulesToRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddRulesToRoleRequestWithBody(server, workspaceUUID, roleUUID, "application/json", bodyReader)
}

// NewBulkAddRulesToRoleRequestWithBody generates requests for BulkAddRulesToRole with any type of body
func NewBulkAddRulesToRoleRequestWithBody(server string, workspaceUUID string, roleUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/bulk-add-rules/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkAddServiceUsersToRoleRequest calls the generic BulkAddServiceUsersToRole builder with application/json body
func NewBulkAddServiceUsersToRoleRequest(server string, workspaceUUID string, roleUUID string, body BulkAddServiceUsersToRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddServiceUsersToRoleRequestWithBody(server, workspaceUUID, roleUUID, "application/json", bodyReader)
}

// NewBulkAddServiceUsersToRoleRequestWithBody generates requests for BulkAddServiceUsersToRole with any type of body
func NewBulkAddServiceUsersToRoleRequestWithBody(server string, workspaceUUID string, roleUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/bulk-add-service-users/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkAddUsersToRoleRequest calls the generic BulkAddUsersToRole builder with application/json body
func NewBulkAddUsersToRoleRequest(server string, workspaceUUID string, roleUUID string, body BulkAddUsersToRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkAddUsersToRoleRequestWithBody(server, workspaceUUID, roleUUID, "application/json", bodyReader)
}

// NewBulkAddUsersToRoleRequestWithBody generates requests for BulkAddUsersToRole with any type of body
func NewBulkAddUsersToRoleRequestWithBody(server string, workspaceUUID string, roleUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/bulk-add-users/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRoleFromGroupRequest generates requests for RemoveRoleFromGroup
func NewRemoveRoleFromGroupRequest(server string, workspaceUUID string, roleUUID string, groupUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupUUID", runtime.ParamLocationPath, groupUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/group/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleRulesRequest generates requests for ListRoleRules
func NewListRoleRulesRequest(server string, workspaceUUID string, roleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/rule/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveRuleFromRoleRequest generates requests for RemoveRuleFromRole
func NewRemoveRuleFromRoleRequest(server string, workspaceUUID string, roleUUID string, ruleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/rule/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddRuleToRoleRequest generates requests for AddRuleToRole
func NewAddRuleToRoleRequest(server string, workspaceUUID string, roleUUID string, ruleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/rule/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRoleServiceUsersRequest generates requests for ListRoleServiceUsers
func NewListRoleServiceUsersRequest(server string, workspaceUUID string, roleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/service-user/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveServiceUserFromRoleRequest generates requests for RemoveServiceUserFromRole
func NewRemoveServiceUserFromRoleRequest(server string, workspaceUUID string, roleUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/service-user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddServiceUserToRoleRequest calls the generic AddServiceUserToRole builder with application/json body
func NewAddServiceUserToRoleRequest(server string, workspaceUUID string, roleUUID string, serviceUserUUID string, body AddServiceUserToRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddServiceUserToRoleRequestWithBody(server, workspaceUUID, roleUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewAddServiceUserToRoleRequestWithBody generates requests for AddServiceUserToRole with any type of body
func NewAddServiceUserToRoleRequestWithBody(server string, workspaceUUID string, roleUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/service-user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRoleUsersRequest generates requests for ListRoleUsers
func NewListRoleUsersRequest(server string, workspaceUUID string, roleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/user/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromRoleRequest generates requests for RemoveUserFromRole
func NewRemoveUserFromRoleRequest(server string, workspaceUUID string, roleUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "roleUUID", runtime.ParamLocationPath, roleUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/role/%s/user/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRulesRequest generates requests for ListRules
func NewListRulesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRuleRequest calls the generic CreateRule builder with application/json body
func NewCreateRuleRequest(server string, workspaceUUID string, body CreateRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRuleRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewCreateRuleRequestWithBody generates requests for CreateRule with any type of body
func NewCreateRuleRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRuleRequest generates requests for DeleteRule
func NewDeleteRuleRequest(server string, workspaceUUID string, ruleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuleRequest generates requests for GetRule
func NewGetRuleRequest(server string, workspaceUUID string, ruleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRuleRequest calls the generic UpdateRule builder with application/json body
func NewUpdateRuleRequest(server string, workspaceUUID string, ruleUUID string, body UpdateRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRuleRequestWithBody(server, workspaceUUID, ruleUUID, "application/json", bodyReader)
}

// NewUpdateRuleRequestWithBody generates requests for UpdateRule with any type of body
func NewUpdateRuleRequestWithBody(server string, workspaceUUID string, ruleUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRuleRolesRequest generates requests for ListRuleRoles
func NewListRuleRolesRequest(server string, workspaceUUID string, ruleUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ruleUUID", runtime.ParamLocationPath, ruleUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/rule/%s/role/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServiceUsersRequest generates requests for ListServiceUsers
func NewListServiceUsersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceUserRequest calls the generic CreateServiceUser builder with application/json body
func NewCreateServiceUserRequest(server string, workspaceUUID string, body CreateServiceUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceUserRequestWithBody(server, workspaceUUID, "application/json", bodyReader)
}

// NewCreateServiceUserRequestWithBody generates requests for CreateServiceUser with any type of body
func NewCreateServiceUserRequestWithBody(server string, workspaceUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceUserRequest generates requests for DeleteServiceUser
func NewDeleteServiceUserRequest(server string, workspaceUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceUserRequest calls the generic UpdateServiceUser builder with application/json body
func NewUpdateServiceUserRequest(server string, workspaceUUID string, serviceUserUUID string, body UpdateServiceUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceUserRequestWithBody(server, workspaceUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewUpdateServiceUserRequestWithBody generates requests for UpdateServiceUser with any type of body
func NewUpdateServiceUserRequestWithBody(server string, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateServiceUserKiseKeyRequest calls the generic CreateServiceUserKiseKey builder with application/json body
func NewCreateServiceUserKiseKeyRequest(server string, workspaceUUID string, serviceUserUUID string, body CreateServiceUserKiseKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceUserKiseKeyRequestWithBody(server, workspaceUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewCreateServiceUserKiseKeyRequestWithBody generates requests for CreateServiceUserKiseKey with any type of body
func NewCreateServiceUserKiseKeyRequestWithBody(server string, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/kise/key/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceUserKiseKeyRequest generates requests for DeleteServiceUserKiseKey
func NewDeleteServiceUserKiseKeyRequest(server string, workspaceUUID string, serviceUserUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/kise/key/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServiceUserPublicKeysRequest generates requests for ListServiceUserPublicKeys
func NewListServiceUserPublicKeysRequest(server string, workspaceUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/service-user-public-key/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceUserPublicKeyRequest calls the generic CreateServiceUserPublicKey builder with application/json body
func NewCreateServiceUserPublicKeyRequest(server string, workspaceUUID string, serviceUserUUID string, body CreateServiceUserPublicKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceUserPublicKeyRequestWithBody(server, workspaceUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewCreateServiceUserPublicKeyRequestWithBody generates requests for CreateServiceUserPublicKey with any type of body
func NewCreateServiceUserPublicKeyRequestWithBody(server string, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/service-user-public-key/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceUserPublicKeyRequest generates requests for DeleteServiceUserPublicKey
func NewDeleteServiceUserPublicKeyRequest(server string, workspaceUUID string, serviceUserUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/service-user-public-key/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServiceUserTokensRequest generates requests for ListServiceUserTokens
func NewListServiceUserTokensRequest(server string, workspaceUUID string, serviceUserUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/token/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceUserTokenRequest calls the generic CreateServiceUserToken builder with application/json body
func NewCreateServiceUserTokenRequest(server string, workspaceUUID string, serviceUserUUID string, body CreateServiceUserTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceUserTokenRequestWithBody(server, workspaceUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewCreateServiceUserTokenRequestWithBody generates requests for CreateServiceUserToken with any type of body
func NewCreateServiceUserTokenRequestWithBody(server string, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/token/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceUserTokenRequest generates requests for DeleteServiceUserToken
func NewDeleteServiceUserTokenRequest(server string, workspaceUUID string, serviceUserUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service-user/%s/token/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/service/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkRefreshThirdPartyTokensRequest calls the generic BulkRefreshThirdPartyTokens builder with application/json body
func NewBulkRefreshThirdPartyTokensRequest(server string, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, body BulkRefreshThirdPartyTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkRefreshThirdPartyTokensRequestWithBody(server, workspaceUUID, thirdPartyUUID, serviceUserUUID, "application/json", bodyReader)
}

// NewBulkRefreshThirdPartyTokensRequestWithBody generates requests for BulkRefreshThirdPartyTokens with any type of body
func NewBulkRefreshThirdPartyTokensRequestWithBody(server string, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "thirdPartyUUID", runtime.ParamLocationPath, thirdPartyUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "serviceUserUUID", runtime.ParamLocationPath, serviceUserUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/third-parties/%s/service-users/%s/bulk-refresh-tokens", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, workspaceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromWorkspaceRequest generates requests for RemoveUserFromWorkspace
func NewRemoveUserFromWorkspaceRequest(server string, workspaceUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAllowUserRequest generates requests for AllowUser
func NewAllowUserRequest(server string, workspaceUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/allow/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserKiseKeysRequest generates requests for ListUserKiseKeys
func NewListUserKiseKeysRequest(server string, workspaceUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/kise/key/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserKiseKeyRequest calls the generic CreateUserKiseKey builder with application/json body
func NewCreateUserKiseKeyRequest(server string, workspaceUUID string, userUUID string, body CreateUserKiseKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserKiseKeyRequestWithBody(server, workspaceUUID, userUUID, "application/json", bodyReader)
}

// NewCreateUserKiseKeyRequestWithBody generates requests for CreateUserKiseKey with any type of body
func NewCreateUserKiseKeyRequestWithBody(server string, workspaceUUID string, userUUID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/kise/key/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserKiseKeyRequest generates requests for DeleteUserKiseKey
func NewDeleteUserKiseKeyRequest(server string, workspaceUUID string, userUUID string, resourceUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceUUID", runtime.ParamLocationPath, resourceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/kise/key/%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSuspendUserRequest generates requests for SuspendUser
func NewSuspendUserRequest(server string, workspaceUUID string, userUUID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspaceUUID", runtime.ParamLocationPath, workspaceUUID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userUUID", runtime.ParamLocationPath, userUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/api/v1/workspace/%s/user/%s/suspend/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOpenIDTokenRequest calls the generic CreateOpenIDToken builder with application/json body
func NewCreateOpenIDTokenRequest(server string, body CreateOpenIDTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOpenIDTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOpenIDTokenRequestWithBody generates requests for CreateOpenIDToken with any type of body
func NewCreateOpenIDTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/iam/v1/openid/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AcceptInvitationWithBodyWithResponse request with any body
	AcceptInvitationWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error)

	AcceptInvitationWithResponse(ctx context.Context, token string, body AcceptInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error)

	// CreateTokenWithCredWithBodyWithResponse request with any body
	CreateTokenWithCredWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenWithCredResponse, error)

	CreateTokenWithCredWithResponse(ctx context.Context, body CreateTokenWithCredJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenWithCredResponse, error)

	// CreateTokenWithChallengeWithBodyWithResponse request with any body
	CreateTokenWithChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenWithChallengeResponse, error)

	CreateTokenWithChallengeWithResponse(ctx context.Context, body CreateTokenWithChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenWithChallengeResponse, error)

	// ListDetailedGroupWithResponse request
	ListDetailedGroupWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedGroupResponse, error)

	// GetDetailedGroupWithResponse request
	GetDetailedGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*GetDetailedGroupResponse, error)

	// ListDetailedServiceUsersWithResponse request
	ListDetailedServiceUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedServiceUsersResponse, error)

	// GetDetailedServiceUserWithResponse request
	GetDetailedServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*GetDetailedServiceUserResponse, error)

	// ListDetailedUsersWithResponse request
	ListDetailedUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedUsersResponse, error)

	// GetDetailedUserWithResponse request
	GetDetailedUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*GetDetailedUserResponse, error)

	// HealthzWithResponse request
	HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthzResponse, error)

	// CreateThirdPartyAccessTokenWithBodyWithResponse request with any body
	CreateThirdPartyAccessTokenWithBodyWithResponse(ctx context.Context, organizationUUID string, thirdPartyUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThirdPartyAccessTokenResponse, error)

	CreateThirdPartyAccessTokenWithResponse(ctx context.Context, organizationUUID string, thirdPartyUUID string, body CreateThirdPartyAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThirdPartyAccessTokenResponse, error)

	// ChangePasswordWithBodyWithResponse request with any body
	ChangePasswordWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	ChangePasswordWithResponse(ctx context.Context, token string, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error)

	// ResetPasswordWithBodyWithResponse request with any body
	ResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error)

	ResetPasswordWithResponse(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UserBulkCanWithBodyWithResponse request with any body
	UserBulkCanWithBodyWithResponse(ctx context.Context, userUUID string, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserBulkCanResponse, error)

	UserBulkCanWithResponse(ctx context.Context, userUUID string, workspaceUUID string, body UserBulkCanJSONRequestBody, reqEditors ...RequestEditorFn) (*UserBulkCanResponse, error)

	// DisableUserOTPWithResponse request
	DisableUserOTPWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*DisableUserOTPResponse, error)

	// GetUserOTPWithResponse request
	GetUserOTPWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*GetUserOTPResponse, error)

	// EnableUserOTPWithBodyWithResponse request with any body
	EnableUserOTPWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableUserOTPResponse, error)

	EnableUserOTPWithResponse(ctx context.Context, userUUID string, body EnableUserOTPJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableUserOTPResponse, error)

	// ListUserPublicKeysWithResponse request
	ListUserPublicKeysWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserPublicKeysResponse, error)

	// CreateUserPublicKeyWithBodyWithResponse request with any body
	CreateUserPublicKeyWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPublicKeyResponse, error)

	CreateUserPublicKeyWithResponse(ctx context.Context, userUUID string, body CreateUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPublicKeyResponse, error)

	// DeleteUserPublicKeyWithResponse request
	DeleteUserPublicKeyWithResponse(ctx context.Context, userUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteUserPublicKeyResponse, error)

	// ListUserTokensWithResponse request
	ListUserTokensWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserTokensResponse, error)

	// CreateUserTokenWithBodyWithResponse request with any body
	CreateUserTokenWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error)

	CreateUserTokenWithResponse(ctx context.Context, userUUID string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error)

	// DeleteUserTokenWithResponse request
	DeleteUserTokenWithResponse(ctx context.Context, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error)

	// ListUserWorkspacesWithResponse request
	ListUserWorkspacesWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserWorkspacesResponse, error)

	// ListBackupKeysWithResponse request
	ListBackupKeysWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListBackupKeysResponse, error)

	// CreateBackupKeyWithBodyWithResponse request with any body
	CreateBackupKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackupKeyResponse, error)

	CreateBackupKeyWithResponse(ctx context.Context, workspaceUUID string, body CreateBackupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackupKeyResponse, error)

	// DeleteBackupKeyWithResponse request
	DeleteBackupKeyWithResponse(ctx context.Context, workspaceUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteBackupKeyResponse, error)

	// ListGroupWithResponse request
	ListGroupWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListGroupResponse, error)

	// CreateGroupWithBodyWithResponse request with any body
	CreateGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	CreateGroupWithResponse(ctx context.Context, workspaceUUID string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	// DeleteGroupWithResponse request
	DeleteGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error)

	// GetGroupWithResponse request
	GetGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// UpdateGroupWithBodyWithResponse request with any body
	UpdateGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error)

	UpdateGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error)

	// BulkAddRolesToGroupWithBodyWithResponse request with any body
	BulkAddRolesToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddRolesToGroupResponse, error)

	BulkAddRolesToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddRolesToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddRolesToGroupResponse, error)

	// BulkAddServiceUsersToGroupWithBodyWithResponse request with any body
	BulkAddServiceUsersToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToGroupResponse, error)

	BulkAddServiceUsersToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddServiceUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToGroupResponse, error)

	// BulkAddUsersToGroupWithBodyWithResponse request with any body
	BulkAddUsersToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddUsersToGroupResponse, error)

	BulkAddUsersToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddUsersToGroupResponse, error)

	// ListGroupRolesWithResponse request
	ListGroupRolesWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupRolesResponse, error)

	// ListGroupServiceUsersWithResponse request
	ListGroupServiceUsersWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupServiceUsersResponse, error)

	// RemoveServiceUserFromGroupWithResponse request
	RemoveServiceUserFromGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*RemoveServiceUserFromGroupResponse, error)

	// AddServiceUserToGroupWithResponse request
	AddServiceUserToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*AddServiceUserToGroupResponse, error)

	// ListGroupUsersWithResponse request
	ListGroupUsersWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupUsersResponse, error)

	// RemoveUserFromGroupWithResponse request
	RemoveUserFromGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromGroupResponse, error)

	// AddUserToGroupWithResponse request
	AddUserToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*AddUserToGroupResponse, error)

	// InviteUserWithBodyWithResponse request with any body
	InviteUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserResponse, error)

	InviteUserWithResponse(ctx context.Context, workspaceUUID string, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserResponse, error)

	// ListServiceUserKiseKeysWithResponse request
	ListServiceUserKiseKeysWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserKiseKeysResponse, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, workspaceUUID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// GetRoleWithResponse request
	GetRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error)

	// BulkAddRulesToRoleWithBodyWithResponse request with any body
	BulkAddRulesToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddRulesToRoleResponse, error)

	BulkAddRulesToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddRulesToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddRulesToRoleResponse, error)

	// BulkAddServiceUsersToRoleWithBodyWithResponse request with any body
	BulkAddServiceUsersToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToRoleResponse, error)

	BulkAddServiceUsersToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddServiceUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToRoleResponse, error)

	// BulkAddUsersToRoleWithBodyWithResponse request with any body
	BulkAddUsersToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddUsersToRoleResponse, error)

	BulkAddUsersToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddUsersToRoleResponse, error)

	// RemoveRoleFromGroupWithResponse request
	RemoveRoleFromGroupWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*RemoveRoleFromGroupResponse, error)

	// ListRoleRulesWithResponse request
	ListRoleRulesWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleRulesResponse, error)

	// RemoveRuleFromRoleWithResponse request
	RemoveRuleFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*RemoveRuleFromRoleResponse, error)

	// AddRuleToRoleWithResponse request
	AddRuleToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*AddRuleToRoleResponse, error)

	// ListRoleServiceUsersWithResponse request
	ListRoleServiceUsersWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleServiceUsersResponse, error)

	// RemoveServiceUserFromRoleWithResponse request
	RemoveServiceUserFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*RemoveServiceUserFromRoleResponse, error)

	// AddServiceUserToRoleWithBodyWithResponse request with any body
	AddServiceUserToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddServiceUserToRoleResponse, error)

	AddServiceUserToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, body AddServiceUserToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddServiceUserToRoleResponse, error)

	// ListRoleUsersWithResponse request
	ListRoleUsersWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleUsersResponse, error)

	// RemoveUserFromRoleWithResponse request
	RemoveUserFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromRoleResponse, error)

	// ListRulesWithResponse request
	ListRulesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListRulesResponse, error)

	// CreateRuleWithBodyWithResponse request with any body
	CreateRuleWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error)

	CreateRuleWithResponse(ctx context.Context, workspaceUUID string, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error)

	// DeleteRuleWithResponse request
	DeleteRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*DeleteRuleResponse, error)

	// GetRuleWithResponse request
	GetRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*GetRuleResponse, error)

	// UpdateRuleWithBodyWithResponse request with any body
	UpdateRuleWithBodyWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRuleResponse, error)

	UpdateRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, body UpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRuleResponse, error)

	// ListRuleRolesWithResponse request
	ListRuleRolesWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*ListRuleRolesResponse, error)

	// ListServiceUsersWithResponse request
	ListServiceUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServiceUsersResponse, error)

	// CreateServiceUserWithBodyWithResponse request with any body
	CreateServiceUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserResponse, error)

	CreateServiceUserWithResponse(ctx context.Context, workspaceUUID string, body CreateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserResponse, error)

	// DeleteServiceUserWithResponse request
	DeleteServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserResponse, error)

	// UpdateServiceUserWithBodyWithResponse request with any body
	UpdateServiceUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceUserResponse, error)

	UpdateServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body UpdateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceUserResponse, error)

	// CreateServiceUserKiseKeyWithBodyWithResponse request with any body
	CreateServiceUserKiseKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserKiseKeyResponse, error)

	CreateServiceUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserKiseKeyResponse, error)

	// DeleteServiceUserKiseKeyWithResponse request
	DeleteServiceUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserKiseKeyResponse, error)

	// ListServiceUserPublicKeysWithResponse request
	ListServiceUserPublicKeysWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserPublicKeysResponse, error)

	// CreateServiceUserPublicKeyWithBodyWithResponse request with any body
	CreateServiceUserPublicKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserPublicKeyResponse, error)

	CreateServiceUserPublicKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserPublicKeyResponse, error)

	// DeleteServiceUserPublicKeyWithResponse request
	DeleteServiceUserPublicKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserPublicKeyResponse, error)

	// ListServiceUserTokensWithResponse request
	ListServiceUserTokensWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserTokensResponse, error)

	// CreateServiceUserTokenWithBodyWithResponse request with any body
	CreateServiceUserTokenWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserTokenResponse, error)

	CreateServiceUserTokenWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserTokenResponse, error)

	// DeleteServiceUserTokenWithResponse request
	DeleteServiceUserTokenWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserTokenResponse, error)

	// ListServicesWithResponse request
	ListServicesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// BulkRefreshThirdPartyTokensWithBodyWithResponse request with any body
	BulkRefreshThirdPartyTokensWithBodyWithResponse(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkRefreshThirdPartyTokensResponse, error)

	BulkRefreshThirdPartyTokensWithResponse(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, body BulkRefreshThirdPartyTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkRefreshThirdPartyTokensResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// RemoveUserFromWorkspaceWithResponse request
	RemoveUserFromWorkspaceWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromWorkspaceResponse, error)

	// AllowUserWithResponse request
	AllowUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*AllowUserResponse, error)

	// ListUserKiseKeysWithResponse request
	ListUserKiseKeysWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*ListUserKiseKeysResponse, error)

	// CreateUserKiseKeyWithBodyWithResponse request with any body
	CreateUserKiseKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserKiseKeyResponse, error)

	CreateUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, body CreateUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserKiseKeyResponse, error)

	// DeleteUserKiseKeyWithResponse request
	DeleteUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteUserKiseKeyResponse, error)

	// SuspendUserWithResponse request
	SuspendUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*SuspendUserResponse, error)

	// CreateOpenIDTokenWithBodyWithResponse request with any body
	CreateOpenIDTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpenIDTokenResponse, error)

	CreateOpenIDTokenWithResponse(ctx context.Context, body CreateOpenIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpenIDTokenResponse, error)
}

type AcceptInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		Name      *string    `json:"name,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AcceptInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenWithCredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Challenge      *string `json:"challenge,omitempty"`
		ChallengeToken *string `json:"challenge_token,omitempty"`
		ChallengeType  *string `json:"challenge_type,omitempty"`
	}
	JSON201 *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		DeletedAt *time.Time `json:"deleted_at,omitempty"`
		Secret    *string    `json:"secret,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		User      *string    `json:"user,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTokenWithCredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenWithCredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenWithChallengeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Challenge      *string `json:"challenge,omitempty"`
		ChallengeToken *string `json:"challenge_token,omitempty"`
		ChallengeType  *string `json:"challenge_type,omitempty"`
	}
	JSON201 *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		DeletedAt *time.Time `json:"deleted_at,omitempty"`
		Secret    *string    `json:"secret,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		User      *string    `json:"user,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateTokenWithChallengeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenWithChallengeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDetailedGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Groups *[]SibGroup `json:"groups"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDetailedGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDetailedGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailedGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDetailedGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailedGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDetailedServiceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ServiceUsers *[]SibServiceUser `json:"service_users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDetailedServiceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDetailedServiceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailedServiceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDetailedServiceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailedServiceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDetailedUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]SibUser `json:"users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDetailedUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDetailedUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDetailedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		Name      *string    `json:"name,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDetailedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDetailedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Caches    *[]SibHealthzResponseDefault `json:"caches"`
		Databases *[]SibHealthzResponseDefault `json:"databases"`
		Storage   *SibHealthzResponseDefault   `json:"storage,omitempty"`
	}
	JSON500 *struct {
		Caches    *[]SibHealthzResponseDefault `json:"caches"`
		Databases *[]SibHealthzResponseDefault `json:"databases"`
		Storage   *SibHealthzResponseDefault   `json:"storage,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r HealthzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThirdPartyAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessToken  *string `json:"access_token,omitempty"`
		ExpiresIn    *int    `json:"expires_in,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
		Scope        *string `json:"scope,omitempty"`
		TokenType    *string `json:"token_type,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateThirdPartyAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThirdPartyAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		Name      *string    `json:"name,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserBulkCanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Actions *[]string `json:"actions"`
		Allowed *bool     `json:"allowed,omitempty"`
		Path    *string   `json:"path,omitempty"`
		Service *string   `json:"service,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r UserBulkCanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserBulkCanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableUserOTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DisableUserOTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableUserOTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BackupCodes *[]string  `json:"backup_codes,omitempty"`
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Enabled     *bool      `json:"enabled,omitempty"`
		QrCode      *string    `json:"qr_code,omitempty"`
		Secret      *string    `json:"secret,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserOTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableUserOTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		BackupCodes *[]string  `json:"backup_codes,omitempty"`
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Enabled     *bool      `json:"enabled,omitempty"`
		QrCode      *string    `json:"qr_code,omitempty"`
		Secret      *string    `json:"secret,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r EnableUserOTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableUserOTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PublicKeys *[]SibPublicKey `json:"public_keys"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Key       *string    `json:"key,omitempty"`
		Title     *string    `json:"title,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		User      *string    `json:"user,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		UserTokens *[]SibUserToken `json:"user_tokens"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		Secret      *string    `json:"secret,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		User        *string    `json:"user,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Workspaces *[]SibWorkspace `json:"workspaces"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBackupKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BackupKeys *[]SibBackupKey `json:"backup_keys"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBackupKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBackupKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBackupKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Key         *string    `json:"key,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateBackupKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBackupKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackupKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBackupKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackupKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Groups *[]SibGroup `json:"groups"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddRolesToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		RoleBindings *[]struct {
			Group     *string     `json:"group,omitempty"`
			Items     interface{} `json:"items,omitempty"`
			Role      *string     `json:"role,omitempty"`
			Workspace *string     `json:"workspace,omitempty"`
		} `json:"role_bindings"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddRolesToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddRolesToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddServiceUsersToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		ServiceUserGroups *[]struct {
			Group       *string `json:"group,omitempty"`
			ServiceUser *string `json:"service_user,omitempty"`
		} `json:"service_user_groups"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddServiceUsersToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddServiceUsersToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddUsersToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		UserGroups *[]struct {
			Group *string `json:"group,omitempty"`
			User  *string `json:"user,omitempty"`
		} `json:"user_groups"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddUsersToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddUsersToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Roles *[]SibRole `json:"roles"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGroupRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupServiceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ServiceUsers *[]SibServiceUser `json:"service_users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGroupServiceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupServiceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveServiceUserFromGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveServiceUserFromGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveServiceUserFromGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddServiceUserToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Group       *string `json:"group,omitempty"`
		ServiceUser *string `json:"service_user,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AddServiceUserToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddServiceUserToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]SibUser `json:"users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGroupUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserToGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Group *string `json:"group,omitempty"`
		User  *string `json:"user,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AddUserToGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserToGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		ExpiresAt *time.Time `json:"expires_at,omitempty"`
		Role      *string    `json:"role,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
		Workspace *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r InviteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceUserKiseKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		KiseKeys *[]SibKiseKey `json:"kise_keys"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServiceUserKiseKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceUserKiseKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Roles *[]SibRole `json:"roles"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddRulesToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		RoleBindings *[]struct {
			Role      *string `json:"role,omitempty"`
			Rule      *string `json:"rule,omitempty"`
			Workspace *string `json:"workspace,omitempty"`
		} `json:"role_bindings"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddRulesToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddRulesToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddServiceUsersToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		RoleBindings *[]struct {
			Items       interface{} `json:"items,omitempty"`
			Role        *string     `json:"role,omitempty"`
			ServiceUser *string     `json:"service_user,omitempty"`
			Workspace   *string     `json:"workspace,omitempty"`
		} `json:"role_bindings"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddServiceUsersToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddServiceUsersToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkAddUsersToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		RoleBindings *[]struct {
			Items     interface{} `json:"items,omitempty"`
			Role      *string     `json:"role,omitempty"`
			User      *string     `json:"user,omitempty"`
			Workspace *string     `json:"workspace,omitempty"`
		} `json:"role_bindings"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkAddUsersToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkAddUsersToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRoleFromGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveRoleFromGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRoleFromGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rules *[]SibRule `json:"rules"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRoleRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRuleFromRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveRuleFromRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRuleFromRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRuleToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Role *string `json:"role,omitempty"`
		Rule *string `json:"rule,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AddRuleToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRuleToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleServiceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ServiceUsers *[]SibServiceUser `json:"service_users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRoleServiceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleServiceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveServiceUserFromRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveServiceUserFromRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveServiceUserFromRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddServiceUserToRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Items       interface{} `json:"items,omitempty"`
		Role        *string     `json:"role,omitempty"`
		ServiceUser *string     `json:"service_user,omitempty"`
		Workspace   *string     `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AddServiceUserToRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddServiceUserToRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRoleUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]SibUser `json:"users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRoleUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRoleUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Rules *[]SibRule `json:"rules"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRuleRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Roles *[]SibRole `json:"roles"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRuleRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRuleRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ServiceUsers *[]SibServiceUser `json:"service_users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServiceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateServiceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteServiceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateServiceUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceUserKiseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		PublicKey   *string    `json:"public_key,omitempty"`
		ServiceUser *string    `json:"service_user,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		User        *string    `json:"user,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateServiceUserKiseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceUserKiseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceUserKiseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteServiceUserKiseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceUserKiseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceUserPublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PublicKeys *[]SibPublicKey `json:"public_keys"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServiceUserPublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceUserPublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceUserPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Key       *string    `json:"key,omitempty"`
		Title     *string    `json:"title,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		User      *string    `json:"user,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateServiceUserPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceUserPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceUserPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteServiceUserPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceUserPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServiceUserTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tokens *[]SibToken `json:"tokens"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServiceUserTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServiceUserTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		Secret      *string    `json:"secret,omitempty"`
		ServiceUser *string    `json:"service_user,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateServiceUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceUserTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteServiceUserTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceUserTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Services *[]SibService `json:"services"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkRefreshThirdPartyTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RefreshedTokens *[]struct {
			AccessToken *string `json:"access_token,omitempty"`
			ExpiresIn   *int    `json:"expires_in,omitempty"`
			Id          *string `json:"id,omitempty"`
		} `json:"refreshed_tokens"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r BulkRefreshThirdPartyTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkRefreshThirdPartyTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]SibUser `json:"users"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AllowUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		Name      *string    `json:"name,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r AllowUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AllowUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserKiseKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		KiseKeys *[]SibKiseKey `json:"kise_keys"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUserKiseKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserKiseKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserKiseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		CreatedAt   *time.Time `json:"created_at,omitempty"`
		Description *string    `json:"description,omitempty"`
		Name        *string    `json:"name,omitempty"`
		PublicKey   *string    `json:"public_key,omitempty"`
		ServiceUser *string    `json:"service_user,omitempty"`
		UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		User        *string    `json:"user,omitempty"`
		Uuid        *string    `json:"uuid,omitempty"`
		Workspace   *string    `json:"workspace,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateUserKiseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserKiseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserKiseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *string
	JSON400      *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteUserKiseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserKiseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SuspendUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Active    *bool      `json:"active,omitempty"`
		CreatedAt *time.Time `json:"created_at,omitempty"`
		Email     *string    `json:"email,omitempty"`
		Name      *string    `json:"name,omitempty"`
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
		Uuid      *string    `json:"uuid,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r SuspendUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SuspendUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOpenIDTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		AccessToken  *string `json:"access_token,omitempty"`
		ExpiresIn    *int    `json:"expires_in,omitempty"`
		IdToken      *string `json:"id_token,omitempty"`
		RefreshToken *string `json:"refresh_token,omitempty"`
		TokenType    *string `json:"token_type,omitempty"`
	}
	JSON400 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
	JSON403 *struct {
		Detail *string `json:"detail"`
		Errors *[]struct {
			Description *string `json:"description,omitempty"`
		} `json:"errors"`
		NonFieldErrors *string `json:"non_field_errors"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOpenIDTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOpenIDTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AcceptInvitationWithBodyWithResponse request with arbitrary body returning *AcceptInvitationResponse
func (c *ClientWithResponses) AcceptInvitationWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error) {
	rsp, err := c.AcceptInvitationWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInvitationResponse(rsp)
}

func (c *ClientWithResponses) AcceptInvitationWithResponse(ctx context.Context, token string, body AcceptInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptInvitationResponse, error) {
	rsp, err := c.AcceptInvitation(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptInvitationResponse(rsp)
}

// CreateTokenWithCredWithBodyWithResponse request with arbitrary body returning *CreateTokenWithCredResponse
func (c *ClientWithResponses) CreateTokenWithCredWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenWithCredResponse, error) {
	rsp, err := c.CreateTokenWithCredWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenWithCredResponse(rsp)
}

func (c *ClientWithResponses) CreateTokenWithCredWithResponse(ctx context.Context, body CreateTokenWithCredJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenWithCredResponse, error) {
	rsp, err := c.CreateTokenWithCred(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenWithCredResponse(rsp)
}

// CreateTokenWithChallengeWithBodyWithResponse request with arbitrary body returning *CreateTokenWithChallengeResponse
func (c *ClientWithResponses) CreateTokenWithChallengeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenWithChallengeResponse, error) {
	rsp, err := c.CreateTokenWithChallengeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenWithChallengeResponse(rsp)
}

func (c *ClientWithResponses) CreateTokenWithChallengeWithResponse(ctx context.Context, body CreateTokenWithChallengeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenWithChallengeResponse, error) {
	rsp, err := c.CreateTokenWithChallenge(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenWithChallengeResponse(rsp)
}

// ListDetailedGroupWithResponse request returning *ListDetailedGroupResponse
func (c *ClientWithResponses) ListDetailedGroupWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedGroupResponse, error) {
	rsp, err := c.ListDetailedGroup(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDetailedGroupResponse(rsp)
}

// GetDetailedGroupWithResponse request returning *GetDetailedGroupResponse
func (c *ClientWithResponses) GetDetailedGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*GetDetailedGroupResponse, error) {
	rsp, err := c.GetDetailedGroup(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetailedGroupResponse(rsp)
}

// ListDetailedServiceUsersWithResponse request returning *ListDetailedServiceUsersResponse
func (c *ClientWithResponses) ListDetailedServiceUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedServiceUsersResponse, error) {
	rsp, err := c.ListDetailedServiceUsers(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDetailedServiceUsersResponse(rsp)
}

// GetDetailedServiceUserWithResponse request returning *GetDetailedServiceUserResponse
func (c *ClientWithResponses) GetDetailedServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*GetDetailedServiceUserResponse, error) {
	rsp, err := c.GetDetailedServiceUser(ctx, workspaceUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetailedServiceUserResponse(rsp)
}

// ListDetailedUsersWithResponse request returning *ListDetailedUsersResponse
func (c *ClientWithResponses) ListDetailedUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListDetailedUsersResponse, error) {
	rsp, err := c.ListDetailedUsers(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDetailedUsersResponse(rsp)
}

// GetDetailedUserWithResponse request returning *GetDetailedUserResponse
func (c *ClientWithResponses) GetDetailedUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*GetDetailedUserResponse, error) {
	rsp, err := c.GetDetailedUser(ctx, workspaceUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDetailedUserResponse(rsp)
}

// HealthzWithResponse request returning *HealthzResponse
func (c *ClientWithResponses) HealthzWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthzResponse, error) {
	rsp, err := c.Healthz(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthzResponse(rsp)
}

// CreateThirdPartyAccessTokenWithBodyWithResponse request with arbitrary body returning *CreateThirdPartyAccessTokenResponse
func (c *ClientWithResponses) CreateThirdPartyAccessTokenWithBodyWithResponse(ctx context.Context, organizationUUID string, thirdPartyUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThirdPartyAccessTokenResponse, error) {
	rsp, err := c.CreateThirdPartyAccessTokenWithBody(ctx, organizationUUID, thirdPartyUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThirdPartyAccessTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateThirdPartyAccessTokenWithResponse(ctx context.Context, organizationUUID string, thirdPartyUUID string, body CreateThirdPartyAccessTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThirdPartyAccessTokenResponse, error) {
	rsp, err := c.CreateThirdPartyAccessToken(ctx, organizationUUID, thirdPartyUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThirdPartyAccessTokenResponse(rsp)
}

// ChangePasswordWithBodyWithResponse request with arbitrary body returning *ChangePasswordResponse
func (c *ClientWithResponses) ChangePasswordWithBodyWithResponse(ctx context.Context, token string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePasswordWithBody(ctx, token, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangePasswordWithResponse(ctx context.Context, token string, body ChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePasswordResponse, error) {
	rsp, err := c.ChangePassword(ctx, token, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePasswordResponse(rsp)
}

// ResetPasswordWithBodyWithResponse request with arbitrary body returning *ResetPasswordResponse
func (c *ClientWithResponses) ResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error) {
	rsp, err := c.ResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) ResetPasswordWithResponse(ctx context.Context, body ResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error) {
	rsp, err := c.ResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPasswordResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UserBulkCanWithBodyWithResponse request with arbitrary body returning *UserBulkCanResponse
func (c *ClientWithResponses) UserBulkCanWithBodyWithResponse(ctx context.Context, userUUID string, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserBulkCanResponse, error) {
	rsp, err := c.UserBulkCanWithBody(ctx, userUUID, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserBulkCanResponse(rsp)
}

func (c *ClientWithResponses) UserBulkCanWithResponse(ctx context.Context, userUUID string, workspaceUUID string, body UserBulkCanJSONRequestBody, reqEditors ...RequestEditorFn) (*UserBulkCanResponse, error) {
	rsp, err := c.UserBulkCan(ctx, userUUID, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserBulkCanResponse(rsp)
}

// DisableUserOTPWithResponse request returning *DisableUserOTPResponse
func (c *ClientWithResponses) DisableUserOTPWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*DisableUserOTPResponse, error) {
	rsp, err := c.DisableUserOTP(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableUserOTPResponse(rsp)
}

// GetUserOTPWithResponse request returning *GetUserOTPResponse
func (c *ClientWithResponses) GetUserOTPWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*GetUserOTPResponse, error) {
	rsp, err := c.GetUserOTP(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOTPResponse(rsp)
}

// EnableUserOTPWithBodyWithResponse request with arbitrary body returning *EnableUserOTPResponse
func (c *ClientWithResponses) EnableUserOTPWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableUserOTPResponse, error) {
	rsp, err := c.EnableUserOTPWithBody(ctx, userUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableUserOTPResponse(rsp)
}

func (c *ClientWithResponses) EnableUserOTPWithResponse(ctx context.Context, userUUID string, body EnableUserOTPJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableUserOTPResponse, error) {
	rsp, err := c.EnableUserOTP(ctx, userUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableUserOTPResponse(rsp)
}

// ListUserPublicKeysWithResponse request returning *ListUserPublicKeysResponse
func (c *ClientWithResponses) ListUserPublicKeysWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserPublicKeysResponse, error) {
	rsp, err := c.ListUserPublicKeys(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserPublicKeysResponse(rsp)
}

// CreateUserPublicKeyWithBodyWithResponse request with arbitrary body returning *CreateUserPublicKeyResponse
func (c *ClientWithResponses) CreateUserPublicKeyWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserPublicKeyResponse, error) {
	rsp, err := c.CreateUserPublicKeyWithBody(ctx, userUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPublicKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateUserPublicKeyWithResponse(ctx context.Context, userUUID string, body CreateUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserPublicKeyResponse, error) {
	rsp, err := c.CreateUserPublicKey(ctx, userUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserPublicKeyResponse(rsp)
}

// DeleteUserPublicKeyWithResponse request returning *DeleteUserPublicKeyResponse
func (c *ClientWithResponses) DeleteUserPublicKeyWithResponse(ctx context.Context, userUUID string, resourceId string, reqEditors ...RequestEditorFn) (*DeleteUserPublicKeyResponse, error) {
	rsp, err := c.DeleteUserPublicKey(ctx, userUUID, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserPublicKeyResponse(rsp)
}

// ListUserTokensWithResponse request returning *ListUserTokensResponse
func (c *ClientWithResponses) ListUserTokensWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserTokensResponse, error) {
	rsp, err := c.ListUserTokens(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserTokensResponse(rsp)
}

// CreateUserTokenWithBodyWithResponse request with arbitrary body returning *CreateUserTokenResponse
func (c *ClientWithResponses) CreateUserTokenWithBodyWithResponse(ctx context.Context, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error) {
	rsp, err := c.CreateUserTokenWithBody(ctx, userUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateUserTokenWithResponse(ctx context.Context, userUUID string, body CreateUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserTokenResponse, error) {
	rsp, err := c.CreateUserToken(ctx, userUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserTokenResponse(rsp)
}

// DeleteUserTokenWithResponse request returning *DeleteUserTokenResponse
func (c *ClientWithResponses) DeleteUserTokenWithResponse(ctx context.Context, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteUserTokenResponse, error) {
	rsp, err := c.DeleteUserToken(ctx, userUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserTokenResponse(rsp)
}

// ListUserWorkspacesWithResponse request returning *ListUserWorkspacesResponse
func (c *ClientWithResponses) ListUserWorkspacesWithResponse(ctx context.Context, userUUID string, reqEditors ...RequestEditorFn) (*ListUserWorkspacesResponse, error) {
	rsp, err := c.ListUserWorkspaces(ctx, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserWorkspacesResponse(rsp)
}

// ListBackupKeysWithResponse request returning *ListBackupKeysResponse
func (c *ClientWithResponses) ListBackupKeysWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListBackupKeysResponse, error) {
	rsp, err := c.ListBackupKeys(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBackupKeysResponse(rsp)
}

// CreateBackupKeyWithBodyWithResponse request with arbitrary body returning *CreateBackupKeyResponse
func (c *ClientWithResponses) CreateBackupKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBackupKeyResponse, error) {
	rsp, err := c.CreateBackupKeyWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackupKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateBackupKeyWithResponse(ctx context.Context, workspaceUUID string, body CreateBackupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBackupKeyResponse, error) {
	rsp, err := c.CreateBackupKey(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBackupKeyResponse(rsp)
}

// DeleteBackupKeyWithResponse request returning *DeleteBackupKeyResponse
func (c *ClientWithResponses) DeleteBackupKeyWithResponse(ctx context.Context, workspaceUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteBackupKeyResponse, error) {
	rsp, err := c.DeleteBackupKey(ctx, workspaceUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackupKeyResponse(rsp)
}

// ListGroupWithResponse request returning *ListGroupResponse
func (c *ClientWithResponses) ListGroupWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListGroupResponse, error) {
	rsp, err := c.ListGroup(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupResponse(rsp)
}

// CreateGroupWithBodyWithResponse request with arbitrary body returning *CreateGroupResponse
func (c *ClientWithResponses) CreateGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroupWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateGroupWithResponse(ctx context.Context, workspaceUUID string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroup(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

// DeleteGroupWithResponse request returning *DeleteGroupResponse
func (c *ClientWithResponses) DeleteGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error) {
	rsp, err := c.DeleteGroup(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// UpdateGroupWithBodyWithResponse request with arbitrary body returning *UpdateGroupResponse
func (c *ClientWithResponses) UpdateGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error) {
	rsp, err := c.UpdateGroupWithBody(ctx, workspaceUUID, groupUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error) {
	rsp, err := c.UpdateGroup(ctx, workspaceUUID, groupUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupResponse(rsp)
}

// BulkAddRolesToGroupWithBodyWithResponse request with arbitrary body returning *BulkAddRolesToGroupResponse
func (c *ClientWithResponses) BulkAddRolesToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddRolesToGroupResponse, error) {
	rsp, err := c.BulkAddRolesToGroupWithBody(ctx, workspaceUUID, groupUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddRolesToGroupResponse(rsp)
}

func (c *ClientWithResponses) BulkAddRolesToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddRolesToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddRolesToGroupResponse, error) {
	rsp, err := c.BulkAddRolesToGroup(ctx, workspaceUUID, groupUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddRolesToGroupResponse(rsp)
}

// BulkAddServiceUsersToGroupWithBodyWithResponse request with arbitrary body returning *BulkAddServiceUsersToGroupResponse
func (c *ClientWithResponses) BulkAddServiceUsersToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToGroupResponse, error) {
	rsp, err := c.BulkAddServiceUsersToGroupWithBody(ctx, workspaceUUID, groupUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddServiceUsersToGroupResponse(rsp)
}

func (c *ClientWithResponses) BulkAddServiceUsersToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddServiceUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToGroupResponse, error) {
	rsp, err := c.BulkAddServiceUsersToGroup(ctx, workspaceUUID, groupUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddServiceUsersToGroupResponse(rsp)
}

// BulkAddUsersToGroupWithBodyWithResponse request with arbitrary body returning *BulkAddUsersToGroupResponse
func (c *ClientWithResponses) BulkAddUsersToGroupWithBodyWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddUsersToGroupResponse, error) {
	rsp, err := c.BulkAddUsersToGroupWithBody(ctx, workspaceUUID, groupUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddUsersToGroupResponse(rsp)
}

func (c *ClientWithResponses) BulkAddUsersToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, body BulkAddUsersToGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddUsersToGroupResponse, error) {
	rsp, err := c.BulkAddUsersToGroup(ctx, workspaceUUID, groupUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddUsersToGroupResponse(rsp)
}

// ListGroupRolesWithResponse request returning *ListGroupRolesResponse
func (c *ClientWithResponses) ListGroupRolesWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupRolesResponse, error) {
	rsp, err := c.ListGroupRoles(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupRolesResponse(rsp)
}

// ListGroupServiceUsersWithResponse request returning *ListGroupServiceUsersResponse
func (c *ClientWithResponses) ListGroupServiceUsersWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupServiceUsersResponse, error) {
	rsp, err := c.ListGroupServiceUsers(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupServiceUsersResponse(rsp)
}

// RemoveServiceUserFromGroupWithResponse request returning *RemoveServiceUserFromGroupResponse
func (c *ClientWithResponses) RemoveServiceUserFromGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*RemoveServiceUserFromGroupResponse, error) {
	rsp, err := c.RemoveServiceUserFromGroup(ctx, workspaceUUID, groupUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveServiceUserFromGroupResponse(rsp)
}

// AddServiceUserToGroupWithResponse request returning *AddServiceUserToGroupResponse
func (c *ClientWithResponses) AddServiceUserToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*AddServiceUserToGroupResponse, error) {
	rsp, err := c.AddServiceUserToGroup(ctx, workspaceUUID, groupUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddServiceUserToGroupResponse(rsp)
}

// ListGroupUsersWithResponse request returning *ListGroupUsersResponse
func (c *ClientWithResponses) ListGroupUsersWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*ListGroupUsersResponse, error) {
	rsp, err := c.ListGroupUsers(ctx, workspaceUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupUsersResponse(rsp)
}

// RemoveUserFromGroupWithResponse request returning *RemoveUserFromGroupResponse
func (c *ClientWithResponses) RemoveUserFromGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromGroupResponse, error) {
	rsp, err := c.RemoveUserFromGroup(ctx, workspaceUUID, groupUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromGroupResponse(rsp)
}

// AddUserToGroupWithResponse request returning *AddUserToGroupResponse
func (c *ClientWithResponses) AddUserToGroupWithResponse(ctx context.Context, workspaceUUID string, groupUUID string, userUUID string, reqEditors ...RequestEditorFn) (*AddUserToGroupResponse, error) {
	rsp, err := c.AddUserToGroup(ctx, workspaceUUID, groupUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserToGroupResponse(rsp)
}

// InviteUserWithBodyWithResponse request with arbitrary body returning *InviteUserResponse
func (c *ClientWithResponses) InviteUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserResponse, error) {
	rsp, err := c.InviteUserWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserResponse(rsp)
}

func (c *ClientWithResponses) InviteUserWithResponse(ctx context.Context, workspaceUUID string, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserResponse, error) {
	rsp, err := c.InviteUser(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserResponse(rsp)
}

// ListServiceUserKiseKeysWithResponse request returning *ListServiceUserKiseKeysResponse
func (c *ClientWithResponses) ListServiceUserKiseKeysWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserKiseKeysResponse, error) {
	rsp, err := c.ListServiceUserKiseKeys(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceUserKiseKeysResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, workspaceUUID string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, workspaceUUID, roleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// GetRoleWithResponse request returning *GetRoleResponse
func (c *ClientWithResponses) GetRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*GetRoleResponse, error) {
	rsp, err := c.GetRole(ctx, workspaceUUID, roleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRoleResponse(rsp)
}

// BulkAddRulesToRoleWithBodyWithResponse request with arbitrary body returning *BulkAddRulesToRoleResponse
func (c *ClientWithResponses) BulkAddRulesToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddRulesToRoleResponse, error) {
	rsp, err := c.BulkAddRulesToRoleWithBody(ctx, workspaceUUID, roleUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddRulesToRoleResponse(rsp)
}

func (c *ClientWithResponses) BulkAddRulesToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddRulesToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddRulesToRoleResponse, error) {
	rsp, err := c.BulkAddRulesToRole(ctx, workspaceUUID, roleUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddRulesToRoleResponse(rsp)
}

// BulkAddServiceUsersToRoleWithBodyWithResponse request with arbitrary body returning *BulkAddServiceUsersToRoleResponse
func (c *ClientWithResponses) BulkAddServiceUsersToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToRoleResponse, error) {
	rsp, err := c.BulkAddServiceUsersToRoleWithBody(ctx, workspaceUUID, roleUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddServiceUsersToRoleResponse(rsp)
}

func (c *ClientWithResponses) BulkAddServiceUsersToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddServiceUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddServiceUsersToRoleResponse, error) {
	rsp, err := c.BulkAddServiceUsersToRole(ctx, workspaceUUID, roleUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddServiceUsersToRoleResponse(rsp)
}

// BulkAddUsersToRoleWithBodyWithResponse request with arbitrary body returning *BulkAddUsersToRoleResponse
func (c *ClientWithResponses) BulkAddUsersToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkAddUsersToRoleResponse, error) {
	rsp, err := c.BulkAddUsersToRoleWithBody(ctx, workspaceUUID, roleUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddUsersToRoleResponse(rsp)
}

func (c *ClientWithResponses) BulkAddUsersToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, body BulkAddUsersToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkAddUsersToRoleResponse, error) {
	rsp, err := c.BulkAddUsersToRole(ctx, workspaceUUID, roleUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkAddUsersToRoleResponse(rsp)
}

// RemoveRoleFromGroupWithResponse request returning *RemoveRoleFromGroupResponse
func (c *ClientWithResponses) RemoveRoleFromGroupWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, groupUUID string, reqEditors ...RequestEditorFn) (*RemoveRoleFromGroupResponse, error) {
	rsp, err := c.RemoveRoleFromGroup(ctx, workspaceUUID, roleUUID, groupUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRoleFromGroupResponse(rsp)
}

// ListRoleRulesWithResponse request returning *ListRoleRulesResponse
func (c *ClientWithResponses) ListRoleRulesWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleRulesResponse, error) {
	rsp, err := c.ListRoleRules(ctx, workspaceUUID, roleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleRulesResponse(rsp)
}

// RemoveRuleFromRoleWithResponse request returning *RemoveRuleFromRoleResponse
func (c *ClientWithResponses) RemoveRuleFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*RemoveRuleFromRoleResponse, error) {
	rsp, err := c.RemoveRuleFromRole(ctx, workspaceUUID, roleUUID, ruleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRuleFromRoleResponse(rsp)
}

// AddRuleToRoleWithResponse request returning *AddRuleToRoleResponse
func (c *ClientWithResponses) AddRuleToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*AddRuleToRoleResponse, error) {
	rsp, err := c.AddRuleToRole(ctx, workspaceUUID, roleUUID, ruleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRuleToRoleResponse(rsp)
}

// ListRoleServiceUsersWithResponse request returning *ListRoleServiceUsersResponse
func (c *ClientWithResponses) ListRoleServiceUsersWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleServiceUsersResponse, error) {
	rsp, err := c.ListRoleServiceUsers(ctx, workspaceUUID, roleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleServiceUsersResponse(rsp)
}

// RemoveServiceUserFromRoleWithResponse request returning *RemoveServiceUserFromRoleResponse
func (c *ClientWithResponses) RemoveServiceUserFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*RemoveServiceUserFromRoleResponse, error) {
	rsp, err := c.RemoveServiceUserFromRole(ctx, workspaceUUID, roleUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveServiceUserFromRoleResponse(rsp)
}

// AddServiceUserToRoleWithBodyWithResponse request with arbitrary body returning *AddServiceUserToRoleResponse
func (c *ClientWithResponses) AddServiceUserToRoleWithBodyWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddServiceUserToRoleResponse, error) {
	rsp, err := c.AddServiceUserToRoleWithBody(ctx, workspaceUUID, roleUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddServiceUserToRoleResponse(rsp)
}

func (c *ClientWithResponses) AddServiceUserToRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, serviceUserUUID string, body AddServiceUserToRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddServiceUserToRoleResponse, error) {
	rsp, err := c.AddServiceUserToRole(ctx, workspaceUUID, roleUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddServiceUserToRoleResponse(rsp)
}

// ListRoleUsersWithResponse request returning *ListRoleUsersResponse
func (c *ClientWithResponses) ListRoleUsersWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, reqEditors ...RequestEditorFn) (*ListRoleUsersResponse, error) {
	rsp, err := c.ListRoleUsers(ctx, workspaceUUID, roleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRoleUsersResponse(rsp)
}

// RemoveUserFromRoleWithResponse request returning *RemoveUserFromRoleResponse
func (c *ClientWithResponses) RemoveUserFromRoleWithResponse(ctx context.Context, workspaceUUID string, roleUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromRoleResponse, error) {
	rsp, err := c.RemoveUserFromRole(ctx, workspaceUUID, roleUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromRoleResponse(rsp)
}

// ListRulesWithResponse request returning *ListRulesResponse
func (c *ClientWithResponses) ListRulesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListRulesResponse, error) {
	rsp, err := c.ListRules(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRulesResponse(rsp)
}

// CreateRuleWithBodyWithResponse request with arbitrary body returning *CreateRuleResponse
func (c *ClientWithResponses) CreateRuleWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error) {
	rsp, err := c.CreateRuleWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateRuleWithResponse(ctx context.Context, workspaceUUID string, body CreateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRuleResponse, error) {
	rsp, err := c.CreateRule(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRuleResponse(rsp)
}

// DeleteRuleWithResponse request returning *DeleteRuleResponse
func (c *ClientWithResponses) DeleteRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*DeleteRuleResponse, error) {
	rsp, err := c.DeleteRule(ctx, workspaceUUID, ruleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRuleResponse(rsp)
}

// GetRuleWithResponse request returning *GetRuleResponse
func (c *ClientWithResponses) GetRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*GetRuleResponse, error) {
	rsp, err := c.GetRule(ctx, workspaceUUID, ruleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleResponse(rsp)
}

// UpdateRuleWithBodyWithResponse request with arbitrary body returning *UpdateRuleResponse
func (c *ClientWithResponses) UpdateRuleWithBodyWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRuleResponse, error) {
	rsp, err := c.UpdateRuleWithBody(ctx, workspaceUUID, ruleUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRuleWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, body UpdateRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRuleResponse, error) {
	rsp, err := c.UpdateRule(ctx, workspaceUUID, ruleUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRuleResponse(rsp)
}

// ListRuleRolesWithResponse request returning *ListRuleRolesResponse
func (c *ClientWithResponses) ListRuleRolesWithResponse(ctx context.Context, workspaceUUID string, ruleUUID string, reqEditors ...RequestEditorFn) (*ListRuleRolesResponse, error) {
	rsp, err := c.ListRuleRoles(ctx, workspaceUUID, ruleUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRuleRolesResponse(rsp)
}

// ListServiceUsersWithResponse request returning *ListServiceUsersResponse
func (c *ClientWithResponses) ListServiceUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServiceUsersResponse, error) {
	rsp, err := c.ListServiceUsers(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceUsersResponse(rsp)
}

// CreateServiceUserWithBodyWithResponse request with arbitrary body returning *CreateServiceUserResponse
func (c *ClientWithResponses) CreateServiceUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserResponse, error) {
	rsp, err := c.CreateServiceUserWithBody(ctx, workspaceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceUserWithResponse(ctx context.Context, workspaceUUID string, body CreateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserResponse, error) {
	rsp, err := c.CreateServiceUser(ctx, workspaceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserResponse(rsp)
}

// DeleteServiceUserWithResponse request returning *DeleteServiceUserResponse
func (c *ClientWithResponses) DeleteServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserResponse, error) {
	rsp, err := c.DeleteServiceUser(ctx, workspaceUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceUserResponse(rsp)
}

// UpdateServiceUserWithBodyWithResponse request with arbitrary body returning *UpdateServiceUserResponse
func (c *ClientWithResponses) UpdateServiceUserWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceUserResponse, error) {
	rsp, err := c.UpdateServiceUserWithBody(ctx, workspaceUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceUserWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body UpdateServiceUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceUserResponse, error) {
	rsp, err := c.UpdateServiceUser(ctx, workspaceUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceUserResponse(rsp)
}

// CreateServiceUserKiseKeyWithBodyWithResponse request with arbitrary body returning *CreateServiceUserKiseKeyResponse
func (c *ClientWithResponses) CreateServiceUserKiseKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserKiseKeyResponse, error) {
	rsp, err := c.CreateServiceUserKiseKeyWithBody(ctx, workspaceUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserKiseKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserKiseKeyResponse, error) {
	rsp, err := c.CreateServiceUserKiseKey(ctx, workspaceUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserKiseKeyResponse(rsp)
}

// DeleteServiceUserKiseKeyWithResponse request returning *DeleteServiceUserKiseKeyResponse
func (c *ClientWithResponses) DeleteServiceUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserKiseKeyResponse, error) {
	rsp, err := c.DeleteServiceUserKiseKey(ctx, workspaceUUID, serviceUserUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceUserKiseKeyResponse(rsp)
}

// ListServiceUserPublicKeysWithResponse request returning *ListServiceUserPublicKeysResponse
func (c *ClientWithResponses) ListServiceUserPublicKeysWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserPublicKeysResponse, error) {
	rsp, err := c.ListServiceUserPublicKeys(ctx, workspaceUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceUserPublicKeysResponse(rsp)
}

// CreateServiceUserPublicKeyWithBodyWithResponse request with arbitrary body returning *CreateServiceUserPublicKeyResponse
func (c *ClientWithResponses) CreateServiceUserPublicKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserPublicKeyResponse, error) {
	rsp, err := c.CreateServiceUserPublicKeyWithBody(ctx, workspaceUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserPublicKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceUserPublicKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserPublicKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserPublicKeyResponse, error) {
	rsp, err := c.CreateServiceUserPublicKey(ctx, workspaceUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserPublicKeyResponse(rsp)
}

// DeleteServiceUserPublicKeyWithResponse request returning *DeleteServiceUserPublicKeyResponse
func (c *ClientWithResponses) DeleteServiceUserPublicKeyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserPublicKeyResponse, error) {
	rsp, err := c.DeleteServiceUserPublicKey(ctx, workspaceUUID, serviceUserUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceUserPublicKeyResponse(rsp)
}

// ListServiceUserTokensWithResponse request returning *ListServiceUserTokensResponse
func (c *ClientWithResponses) ListServiceUserTokensWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, reqEditors ...RequestEditorFn) (*ListServiceUserTokensResponse, error) {
	rsp, err := c.ListServiceUserTokens(ctx, workspaceUUID, serviceUserUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServiceUserTokensResponse(rsp)
}

// CreateServiceUserTokenWithBodyWithResponse request with arbitrary body returning *CreateServiceUserTokenResponse
func (c *ClientWithResponses) CreateServiceUserTokenWithBodyWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceUserTokenResponse, error) {
	rsp, err := c.CreateServiceUserTokenWithBody(ctx, workspaceUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceUserTokenWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, body CreateServiceUserTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceUserTokenResponse, error) {
	rsp, err := c.CreateServiceUserToken(ctx, workspaceUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceUserTokenResponse(rsp)
}

// DeleteServiceUserTokenWithResponse request returning *DeleteServiceUserTokenResponse
func (c *ClientWithResponses) DeleteServiceUserTokenWithResponse(ctx context.Context, workspaceUUID string, serviceUserUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteServiceUserTokenResponse, error) {
	rsp, err := c.DeleteServiceUserToken(ctx, workspaceUUID, serviceUserUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceUserTokenResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// BulkRefreshThirdPartyTokensWithBodyWithResponse request with arbitrary body returning *BulkRefreshThirdPartyTokensResponse
func (c *ClientWithResponses) BulkRefreshThirdPartyTokensWithBodyWithResponse(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkRefreshThirdPartyTokensResponse, error) {
	rsp, err := c.BulkRefreshThirdPartyTokensWithBody(ctx, workspaceUUID, thirdPartyUUID, serviceUserUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkRefreshThirdPartyTokensResponse(rsp)
}

func (c *ClientWithResponses) BulkRefreshThirdPartyTokensWithResponse(ctx context.Context, workspaceUUID string, thirdPartyUUID string, serviceUserUUID string, body BulkRefreshThirdPartyTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkRefreshThirdPartyTokensResponse, error) {
	rsp, err := c.BulkRefreshThirdPartyTokens(ctx, workspaceUUID, thirdPartyUUID, serviceUserUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkRefreshThirdPartyTokensResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, workspaceUUID string, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, workspaceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// RemoveUserFromWorkspaceWithResponse request returning *RemoveUserFromWorkspaceResponse
func (c *ClientWithResponses) RemoveUserFromWorkspaceWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*RemoveUserFromWorkspaceResponse, error) {
	rsp, err := c.RemoveUserFromWorkspace(ctx, workspaceUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromWorkspaceResponse(rsp)
}

// AllowUserWithResponse request returning *AllowUserResponse
func (c *ClientWithResponses) AllowUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*AllowUserResponse, error) {
	rsp, err := c.AllowUser(ctx, workspaceUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAllowUserResponse(rsp)
}

// ListUserKiseKeysWithResponse request returning *ListUserKiseKeysResponse
func (c *ClientWithResponses) ListUserKiseKeysWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*ListUserKiseKeysResponse, error) {
	rsp, err := c.ListUserKiseKeys(ctx, workspaceUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserKiseKeysResponse(rsp)
}

// CreateUserKiseKeyWithBodyWithResponse request with arbitrary body returning *CreateUserKiseKeyResponse
func (c *ClientWithResponses) CreateUserKiseKeyWithBodyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserKiseKeyResponse, error) {
	rsp, err := c.CreateUserKiseKeyWithBody(ctx, workspaceUUID, userUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserKiseKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, body CreateUserKiseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserKiseKeyResponse, error) {
	rsp, err := c.CreateUserKiseKey(ctx, workspaceUUID, userUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserKiseKeyResponse(rsp)
}

// DeleteUserKiseKeyWithResponse request returning *DeleteUserKiseKeyResponse
func (c *ClientWithResponses) DeleteUserKiseKeyWithResponse(ctx context.Context, workspaceUUID string, userUUID string, resourceUUID string, reqEditors ...RequestEditorFn) (*DeleteUserKiseKeyResponse, error) {
	rsp, err := c.DeleteUserKiseKey(ctx, workspaceUUID, userUUID, resourceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserKiseKeyResponse(rsp)
}

// SuspendUserWithResponse request returning *SuspendUserResponse
func (c *ClientWithResponses) SuspendUserWithResponse(ctx context.Context, workspaceUUID string, userUUID string, reqEditors ...RequestEditorFn) (*SuspendUserResponse, error) {
	rsp, err := c.SuspendUser(ctx, workspaceUUID, userUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSuspendUserResponse(rsp)
}

// CreateOpenIDTokenWithBodyWithResponse request with arbitrary body returning *CreateOpenIDTokenResponse
func (c *ClientWithResponses) CreateOpenIDTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpenIDTokenResponse, error) {
	rsp, err := c.CreateOpenIDTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpenIDTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateOpenIDTokenWithResponse(ctx context.Context, body CreateOpenIDTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpenIDTokenResponse, error) {
	rsp, err := c.CreateOpenIDToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpenIDTokenResponse(rsp)
}

// ParseAcceptInvitationResponse parses an HTTP response from a AcceptInvitationWithResponse call
func ParseAcceptInvitationResponse(rsp *http.Response) (*AcceptInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateTokenWithCredResponse parses an HTTP response from a CreateTokenWithCredWithResponse call
func ParseCreateTokenWithCredResponse(rsp *http.Response) (*CreateTokenWithCredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenWithCredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Challenge      *string `json:"challenge,omitempty"`
			ChallengeToken *string `json:"challenge_token,omitempty"`
			ChallengeType  *string `json:"challenge_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			DeletedAt *time.Time `json:"deleted_at,omitempty"`
			Secret    *string    `json:"secret,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			User      *string    `json:"user,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateTokenWithChallengeResponse parses an HTTP response from a CreateTokenWithChallengeWithResponse call
func ParseCreateTokenWithChallengeResponse(rsp *http.Response) (*CreateTokenWithChallengeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenWithChallengeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Challenge      *string `json:"challenge,omitempty"`
			ChallengeToken *string `json:"challenge_token,omitempty"`
			ChallengeType  *string `json:"challenge_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			DeletedAt *time.Time `json:"deleted_at,omitempty"`
			Secret    *string    `json:"secret,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			User      *string    `json:"user,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListDetailedGroupResponse parses an HTTP response from a ListDetailedGroupWithResponse call
func ParseListDetailedGroupResponse(rsp *http.Response) (*ListDetailedGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDetailedGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Groups *[]SibGroup `json:"groups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDetailedGroupResponse parses an HTTP response from a GetDetailedGroupWithResponse call
func ParseGetDetailedGroupResponse(rsp *http.Response) (*GetDetailedGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetailedGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListDetailedServiceUsersResponse parses an HTTP response from a ListDetailedServiceUsersWithResponse call
func ParseListDetailedServiceUsersResponse(rsp *http.Response) (*ListDetailedServiceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDetailedServiceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ServiceUsers *[]SibServiceUser `json:"service_users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDetailedServiceUserResponse parses an HTTP response from a GetDetailedServiceUserWithResponse call
func ParseGetDetailedServiceUserResponse(rsp *http.Response) (*GetDetailedServiceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetailedServiceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListDetailedUsersResponse parses an HTTP response from a ListDetailedUsersWithResponse call
func ParseListDetailedUsersResponse(rsp *http.Response) (*ListDetailedUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDetailedUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]SibUser `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDetailedUserResponse parses an HTTP response from a GetDetailedUserWithResponse call
func ParseGetDetailedUserResponse(rsp *http.Response) (*GetDetailedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDetailedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseHealthzResponse parses an HTTP response from a HealthzWithResponse call
func ParseHealthzResponse(rsp *http.Response) (*HealthzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Caches    *[]SibHealthzResponseDefault `json:"caches"`
			Databases *[]SibHealthzResponseDefault `json:"databases"`
			Storage   *SibHealthzResponseDefault   `json:"storage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Caches    *[]SibHealthzResponseDefault `json:"caches"`
			Databases *[]SibHealthzResponseDefault `json:"databases"`
			Storage   *SibHealthzResponseDefault   `json:"storage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateThirdPartyAccessTokenResponse parses an HTTP response from a CreateThirdPartyAccessTokenWithResponse call
func ParseCreateThirdPartyAccessTokenResponse(rsp *http.Response) (*CreateThirdPartyAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThirdPartyAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessToken  *string `json:"access_token,omitempty"`
			ExpiresIn    *int    `json:"expires_in,omitempty"`
			RefreshToken *string `json:"refresh_token,omitempty"`
			Scope        *string `json:"scope,omitempty"`
			TokenType    *string `json:"token_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseChangePasswordResponse parses an HTTP response from a ChangePasswordWithResponse call
func ParseChangePasswordResponse(rsp *http.Response) (*ChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseResetPasswordResponse parses an HTTP response from a ResetPasswordWithResponse call
func ParseResetPasswordResponse(rsp *http.Response) (*ResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUserBulkCanResponse parses an HTTP response from a UserBulkCanWithResponse call
func ParseUserBulkCanResponse(rsp *http.Response) (*UserBulkCanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserBulkCanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Actions *[]string `json:"actions"`
			Allowed *bool     `json:"allowed,omitempty"`
			Path    *string   `json:"path,omitempty"`
			Service *string   `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDisableUserOTPResponse parses an HTTP response from a DisableUserOTPWithResponse call
func ParseDisableUserOTPResponse(rsp *http.Response) (*DisableUserOTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableUserOTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetUserOTPResponse parses an HTTP response from a GetUserOTPWithResponse call
func ParseGetUserOTPResponse(rsp *http.Response) (*GetUserOTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BackupCodes *[]string  `json:"backup_codes,omitempty"`
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Enabled     *bool      `json:"enabled,omitempty"`
			QrCode      *string    `json:"qr_code,omitempty"`
			Secret      *string    `json:"secret,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseEnableUserOTPResponse parses an HTTP response from a EnableUserOTPWithResponse call
func ParseEnableUserOTPResponse(rsp *http.Response) (*EnableUserOTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableUserOTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			BackupCodes *[]string  `json:"backup_codes,omitempty"`
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Enabled     *bool      `json:"enabled,omitempty"`
			QrCode      *string    `json:"qr_code,omitempty"`
			Secret      *string    `json:"secret,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListUserPublicKeysResponse parses an HTTP response from a ListUserPublicKeysWithResponse call
func ParseListUserPublicKeysResponse(rsp *http.Response) (*ListUserPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PublicKeys *[]SibPublicKey `json:"public_keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateUserPublicKeyResponse parses an HTTP response from a CreateUserPublicKeyWithResponse call
func ParseCreateUserPublicKeyResponse(rsp *http.Response) (*CreateUserPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Key       *string    `json:"key,omitempty"`
			Title     *string    `json:"title,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			User      *string    `json:"user,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteUserPublicKeyResponse parses an HTTP response from a DeleteUserPublicKeyWithResponse call
func ParseDeleteUserPublicKeyResponse(rsp *http.Response) (*DeleteUserPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListUserTokensResponse parses an HTTP response from a ListUserTokensWithResponse call
func ParseListUserTokensResponse(rsp *http.Response) (*ListUserTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			UserTokens *[]SibUserToken `json:"user_tokens"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateUserTokenResponse parses an HTTP response from a CreateUserTokenWithResponse call
func ParseCreateUserTokenResponse(rsp *http.Response) (*CreateUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			Secret      *string    `json:"secret,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			User        *string    `json:"user,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteUserTokenResponse parses an HTTP response from a DeleteUserTokenWithResponse call
func ParseDeleteUserTokenResponse(rsp *http.Response) (*DeleteUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListUserWorkspacesResponse parses an HTTP response from a ListUserWorkspacesWithResponse call
func ParseListUserWorkspacesResponse(rsp *http.Response) (*ListUserWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Workspaces *[]SibWorkspace `json:"workspaces"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListBackupKeysResponse parses an HTTP response from a ListBackupKeysWithResponse call
func ParseListBackupKeysResponse(rsp *http.Response) (*ListBackupKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBackupKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BackupKeys *[]SibBackupKey `json:"backup_keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateBackupKeyResponse parses an HTTP response from a CreateBackupKeyWithResponse call
func ParseCreateBackupKeyResponse(rsp *http.Response) (*CreateBackupKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBackupKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Key         *string    `json:"key,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteBackupKeyResponse parses an HTTP response from a DeleteBackupKeyWithResponse call
func ParseDeleteBackupKeyResponse(rsp *http.Response) (*DeleteBackupKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackupKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListGroupResponse parses an HTTP response from a ListGroupWithResponse call
func ParseListGroupResponse(rsp *http.Response) (*ListGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Groups *[]SibGroup `json:"groups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateGroupResponse parses an HTTP response from a CreateGroupWithResponse call
func ParseCreateGroupResponse(rsp *http.Response) (*CreateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteGroupResponse parses an HTTP response from a DeleteGroupWithResponse call
func ParseDeleteGroupResponse(rsp *http.Response) (*DeleteGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateGroupResponse parses an HTTP response from a UpdateGroupWithResponse call
func ParseUpdateGroupResponse(rsp *http.Response) (*UpdateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddRolesToGroupResponse parses an HTTP response from a BulkAddRolesToGroupWithResponse call
func ParseBulkAddRolesToGroupResponse(rsp *http.Response) (*BulkAddRolesToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddRolesToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			RoleBindings *[]struct {
				Group     *string     `json:"group,omitempty"`
				Items     interface{} `json:"items,omitempty"`
				Role      *string     `json:"role,omitempty"`
				Workspace *string     `json:"workspace,omitempty"`
			} `json:"role_bindings"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddServiceUsersToGroupResponse parses an HTTP response from a BulkAddServiceUsersToGroupWithResponse call
func ParseBulkAddServiceUsersToGroupResponse(rsp *http.Response) (*BulkAddServiceUsersToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddServiceUsersToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			ServiceUserGroups *[]struct {
				Group       *string `json:"group,omitempty"`
				ServiceUser *string `json:"service_user,omitempty"`
			} `json:"service_user_groups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddUsersToGroupResponse parses an HTTP response from a BulkAddUsersToGroupWithResponse call
func ParseBulkAddUsersToGroupResponse(rsp *http.Response) (*BulkAddUsersToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddUsersToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			UserGroups *[]struct {
				Group *string `json:"group,omitempty"`
				User  *string `json:"user,omitempty"`
			} `json:"user_groups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListGroupRolesResponse parses an HTTP response from a ListGroupRolesWithResponse call
func ParseListGroupRolesResponse(rsp *http.Response) (*ListGroupRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Roles *[]SibRole `json:"roles"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListGroupServiceUsersResponse parses an HTTP response from a ListGroupServiceUsersWithResponse call
func ParseListGroupServiceUsersResponse(rsp *http.Response) (*ListGroupServiceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupServiceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ServiceUsers *[]SibServiceUser `json:"service_users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveServiceUserFromGroupResponse parses an HTTP response from a RemoveServiceUserFromGroupWithResponse call
func ParseRemoveServiceUserFromGroupResponse(rsp *http.Response) (*RemoveServiceUserFromGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveServiceUserFromGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddServiceUserToGroupResponse parses an HTTP response from a AddServiceUserToGroupWithResponse call
func ParseAddServiceUserToGroupResponse(rsp *http.Response) (*AddServiceUserToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddServiceUserToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Group       *string `json:"group,omitempty"`
			ServiceUser *string `json:"service_user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListGroupUsersResponse parses an HTTP response from a ListGroupUsersWithResponse call
func ParseListGroupUsersResponse(rsp *http.Response) (*ListGroupUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]SibUser `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromGroupResponse parses an HTTP response from a RemoveUserFromGroupWithResponse call
func ParseRemoveUserFromGroupResponse(rsp *http.Response) (*RemoveUserFromGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddUserToGroupResponse parses an HTTP response from a AddUserToGroupWithResponse call
func ParseAddUserToGroupResponse(rsp *http.Response) (*AddUserToGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserToGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Group *string `json:"group,omitempty"`
			User  *string `json:"user,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInviteUserResponse parses an HTTP response from a InviteUserWithResponse call
func ParseInviteUserResponse(rsp *http.Response) (*InviteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			ExpiresAt *time.Time `json:"expires_at,omitempty"`
			Role      *string    `json:"role,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
			Workspace *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListServiceUserKiseKeysResponse parses an HTTP response from a ListServiceUserKiseKeysWithResponse call
func ParseListServiceUserKiseKeysResponse(rsp *http.Response) (*ListServiceUserKiseKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceUserKiseKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			KiseKeys *[]SibKiseKey `json:"kise_keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Roles *[]SibRole `json:"roles"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetRoleResponse parses an HTTP response from a GetRoleWithResponse call
func ParseGetRoleResponse(rsp *http.Response) (*GetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddRulesToRoleResponse parses an HTTP response from a BulkAddRulesToRoleWithResponse call
func ParseBulkAddRulesToRoleResponse(rsp *http.Response) (*BulkAddRulesToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddRulesToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			RoleBindings *[]struct {
				Role      *string `json:"role,omitempty"`
				Rule      *string `json:"rule,omitempty"`
				Workspace *string `json:"workspace,omitempty"`
			} `json:"role_bindings"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddServiceUsersToRoleResponse parses an HTTP response from a BulkAddServiceUsersToRoleWithResponse call
func ParseBulkAddServiceUsersToRoleResponse(rsp *http.Response) (*BulkAddServiceUsersToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddServiceUsersToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			RoleBindings *[]struct {
				Items       interface{} `json:"items,omitempty"`
				Role        *string     `json:"role,omitempty"`
				ServiceUser *string     `json:"service_user,omitempty"`
				Workspace   *string     `json:"workspace,omitempty"`
			} `json:"role_bindings"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkAddUsersToRoleResponse parses an HTTP response from a BulkAddUsersToRoleWithResponse call
func ParseBulkAddUsersToRoleResponse(rsp *http.Response) (*BulkAddUsersToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkAddUsersToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			RoleBindings *[]struct {
				Items     interface{} `json:"items,omitempty"`
				Role      *string     `json:"role,omitempty"`
				User      *string     `json:"user,omitempty"`
				Workspace *string     `json:"workspace,omitempty"`
			} `json:"role_bindings"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveRoleFromGroupResponse parses an HTTP response from a RemoveRoleFromGroupWithResponse call
func ParseRemoveRoleFromGroupResponse(rsp *http.Response) (*RemoveRoleFromGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRoleFromGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRoleRulesResponse parses an HTTP response from a ListRoleRulesWithResponse call
func ParseListRoleRulesResponse(rsp *http.Response) (*ListRoleRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rules *[]SibRule `json:"rules"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveRuleFromRoleResponse parses an HTTP response from a RemoveRuleFromRoleWithResponse call
func ParseRemoveRuleFromRoleResponse(rsp *http.Response) (*RemoveRuleFromRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRuleFromRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddRuleToRoleResponse parses an HTTP response from a AddRuleToRoleWithResponse call
func ParseAddRuleToRoleResponse(rsp *http.Response) (*AddRuleToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRuleToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Role *string `json:"role,omitempty"`
			Rule *string `json:"rule,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRoleServiceUsersResponse parses an HTTP response from a ListRoleServiceUsersWithResponse call
func ParseListRoleServiceUsersResponse(rsp *http.Response) (*ListRoleServiceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleServiceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ServiceUsers *[]SibServiceUser `json:"service_users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveServiceUserFromRoleResponse parses an HTTP response from a RemoveServiceUserFromRoleWithResponse call
func ParseRemoveServiceUserFromRoleResponse(rsp *http.Response) (*RemoveServiceUserFromRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveServiceUserFromRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddServiceUserToRoleResponse parses an HTTP response from a AddServiceUserToRoleWithResponse call
func ParseAddServiceUserToRoleResponse(rsp *http.Response) (*AddServiceUserToRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddServiceUserToRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Items       interface{} `json:"items,omitempty"`
			Role        *string     `json:"role,omitempty"`
			ServiceUser *string     `json:"service_user,omitempty"`
			Workspace   *string     `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRoleUsersResponse parses an HTTP response from a ListRoleUsersWithResponse call
func ParseListRoleUsersResponse(rsp *http.Response) (*ListRoleUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRoleUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]SibUser `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromRoleResponse parses an HTTP response from a RemoveUserFromRoleWithResponse call
func ParseRemoveUserFromRoleResponse(rsp *http.Response) (*RemoveUserFromRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRulesResponse parses an HTTP response from a ListRulesWithResponse call
func ParseListRulesResponse(rsp *http.Response) (*ListRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Rules *[]SibRule `json:"rules"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateRuleResponse parses an HTTP response from a CreateRuleWithResponse call
func ParseCreateRuleResponse(rsp *http.Response) (*CreateRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteRuleResponse parses an HTTP response from a DeleteRuleWithResponse call
func ParseDeleteRuleResponse(rsp *http.Response) (*DeleteRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetRuleResponse parses an HTTP response from a GetRuleWithResponse call
func ParseGetRuleResponse(rsp *http.Response) (*GetRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateRuleResponse parses an HTTP response from a UpdateRuleWithResponse call
func ParseUpdateRuleResponse(rsp *http.Response) (*UpdateRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListRuleRolesResponse parses an HTTP response from a ListRuleRolesWithResponse call
func ParseListRuleRolesResponse(rsp *http.Response) (*ListRuleRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRuleRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Roles *[]SibRole `json:"roles"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListServiceUsersResponse parses an HTTP response from a ListServiceUsersWithResponse call
func ParseListServiceUsersResponse(rsp *http.Response) (*ListServiceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ServiceUsers *[]SibServiceUser `json:"service_users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateServiceUserResponse parses an HTTP response from a CreateServiceUserWithResponse call
func ParseCreateServiceUserResponse(rsp *http.Response) (*CreateServiceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteServiceUserResponse parses an HTTP response from a DeleteServiceUserWithResponse call
func ParseDeleteServiceUserResponse(rsp *http.Response) (*DeleteServiceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateServiceUserResponse parses an HTTP response from a UpdateServiceUserWithResponse call
func ParseUpdateServiceUserResponse(rsp *http.Response) (*UpdateServiceUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateServiceUserKiseKeyResponse parses an HTTP response from a CreateServiceUserKiseKeyWithResponse call
func ParseCreateServiceUserKiseKeyResponse(rsp *http.Response) (*CreateServiceUserKiseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceUserKiseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			PublicKey   *string    `json:"public_key,omitempty"`
			ServiceUser *string    `json:"service_user,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			User        *string    `json:"user,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteServiceUserKiseKeyResponse parses an HTTP response from a DeleteServiceUserKiseKeyWithResponse call
func ParseDeleteServiceUserKiseKeyResponse(rsp *http.Response) (*DeleteServiceUserKiseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceUserKiseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListServiceUserPublicKeysResponse parses an HTTP response from a ListServiceUserPublicKeysWithResponse call
func ParseListServiceUserPublicKeysResponse(rsp *http.Response) (*ListServiceUserPublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceUserPublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PublicKeys *[]SibPublicKey `json:"public_keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateServiceUserPublicKeyResponse parses an HTTP response from a CreateServiceUserPublicKeyWithResponse call
func ParseCreateServiceUserPublicKeyResponse(rsp *http.Response) (*CreateServiceUserPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceUserPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Key       *string    `json:"key,omitempty"`
			Title     *string    `json:"title,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			User      *string    `json:"user,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteServiceUserPublicKeyResponse parses an HTTP response from a DeleteServiceUserPublicKeyWithResponse call
func ParseDeleteServiceUserPublicKeyResponse(rsp *http.Response) (*DeleteServiceUserPublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceUserPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListServiceUserTokensResponse parses an HTTP response from a ListServiceUserTokensWithResponse call
func ParseListServiceUserTokensResponse(rsp *http.Response) (*ListServiceUserTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServiceUserTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tokens *[]SibToken `json:"tokens"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateServiceUserTokenResponse parses an HTTP response from a CreateServiceUserTokenWithResponse call
func ParseCreateServiceUserTokenResponse(rsp *http.Response) (*CreateServiceUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			Secret      *string    `json:"secret,omitempty"`
			ServiceUser *string    `json:"service_user,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteServiceUserTokenResponse parses an HTTP response from a DeleteServiceUserTokenWithResponse call
func ParseDeleteServiceUserTokenResponse(rsp *http.Response) (*DeleteServiceUserTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceUserTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Services *[]SibService `json:"services"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseBulkRefreshThirdPartyTokensResponse parses an HTTP response from a BulkRefreshThirdPartyTokensWithResponse call
func ParseBulkRefreshThirdPartyTokensResponse(rsp *http.Response) (*BulkRefreshThirdPartyTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkRefreshThirdPartyTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RefreshedTokens *[]struct {
				AccessToken *string `json:"access_token,omitempty"`
				ExpiresIn   *int    `json:"expires_in,omitempty"`
				Id          *string `json:"id,omitempty"`
			} `json:"refreshed_tokens"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]SibUser `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromWorkspaceResponse parses an HTTP response from a RemoveUserFromWorkspaceWithResponse call
func ParseRemoveUserFromWorkspaceResponse(rsp *http.Response) (*RemoveUserFromWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAllowUserResponse parses an HTTP response from a AllowUserWithResponse call
func ParseAllowUserResponse(rsp *http.Response) (*AllowUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AllowUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListUserKiseKeysResponse parses an HTTP response from a ListUserKiseKeysWithResponse call
func ParseListUserKiseKeysResponse(rsp *http.Response) (*ListUserKiseKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserKiseKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			KiseKeys *[]SibKiseKey `json:"kise_keys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateUserKiseKeyResponse parses an HTTP response from a CreateUserKiseKeyWithResponse call
func ParseCreateUserKiseKeyResponse(rsp *http.Response) (*CreateUserKiseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserKiseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			CreatedAt   *time.Time `json:"created_at,omitempty"`
			Description *string    `json:"description,omitempty"`
			Name        *string    `json:"name,omitempty"`
			PublicKey   *string    `json:"public_key,omitempty"`
			ServiceUser *string    `json:"service_user,omitempty"`
			UpdatedAt   *time.Time `json:"updated_at,omitempty"`
			User        *string    `json:"user,omitempty"`
			Uuid        *string    `json:"uuid,omitempty"`
			Workspace   *string    `json:"workspace,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteUserKiseKeyResponse parses an HTTP response from a DeleteUserKiseKeyWithResponse call
func ParseDeleteUserKiseKeyResponse(rsp *http.Response) (*DeleteUserKiseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserKiseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSuspendUserResponse parses an HTTP response from a SuspendUserWithResponse call
func ParseSuspendUserResponse(rsp *http.Response) (*SuspendUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SuspendUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Active    *bool      `json:"active,omitempty"`
			CreatedAt *time.Time `json:"created_at,omitempty"`
			Email     *string    `json:"email,omitempty"`
			Name      *string    `json:"name,omitempty"`
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
			Uuid      *string    `json:"uuid,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateOpenIDTokenResponse parses an HTTP response from a CreateOpenIDTokenWithResponse call
func ParseCreateOpenIDTokenResponse(rsp *http.Response) (*CreateOpenIDTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOpenIDTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			AccessToken  *string `json:"access_token,omitempty"`
			ExpiresIn    *int    `json:"expires_in,omitempty"`
			IdToken      *string `json:"id_token,omitempty"`
			RefreshToken *string `json:"refresh_token,omitempty"`
			TokenType    *string `json:"token_type,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Detail *string `json:"detail"`
			Errors *[]struct {
				Description *string `json:"description,omitempty"`
			} `json:"errors"`
			NonFieldErrors *string `json:"non_field_errors"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
